{
  "stats": {
    "suites": 6,
    "tests": 23,
    "passes": 23,
    "pending": 0,
    "failures": 0,
    "start": "2018-04-05T19:36:51.601Z",
    "end": "2018-04-05T19:36:51.689Z",
    "duration": 88,
    "testsRegistered": 23,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false,
    "passPercentClass": "success",
    "pendingPercentClass": "danger"
  },
  "suites": {
    "title": "",
    "suites": [
      {
        "title": "Leave Form Component",
        "suites": [
          {
            "title": "Render",
            "suites": [],
            "tests": [
              {
                "title": "should have the correct form name",
                "fullTitle": "Leave Form Component Render should have the correct form name",
                "timedOut": false,
                "duration": 3,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var title = wrapper.find('h2');\n(0, _chai.expect)(title.text()).equal(\"Leave Management System\");",
                "err": {},
                "isRoot": false,
                "uuid": "cb8c23e3-4ddc-46d0-9447-26c80194fdff",
                "parentUUID": "5c9bcd2b-4b98-486c-b053-cecf572b6b85",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should render fromDate",
                "fullTitle": "Leave Form Component Render should render fromDate",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var fromDate = wrapper.find('#fromDate');\n(0, _chai.expect)(fromDate.type()).equal(_fieldGroup2.default);\n(0, _chai.expect)(fromDate.prop('type')).equal('date');\n(0, _chai.expect)(fromDate.prop('label')).equal('From');",
                "err": {},
                "isRoot": false,
                "uuid": "266690b4-049b-4d40-be40-79513d40e568",
                "parentUUID": "5c9bcd2b-4b98-486c-b053-cecf572b6b85",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should render toDate",
                "fullTitle": "Leave Form Component Render should render toDate",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var toDate = wrapper.find('#toDate');\n(0, _chai.expect)(toDate.type()).equal(_fieldGroup2.default);\n(0, _chai.expect)(toDate.prop('type')).equal('date');\n(0, _chai.expect)(toDate.prop('label')).equal('To');",
                "err": {},
                "isRoot": false,
                "uuid": "1e03dc4a-0c2f-4cec-96c2-c3bc4f014b31",
                "parentUUID": "5c9bcd2b-4b98-486c-b053-cecf572b6b85",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should render reason",
                "fullTitle": "Leave Form Component Render should render reason",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var reason = wrapper.find('#reason');\n(0, _chai.expect)(reason.type()).equal(_fieldGroup2.default);\n(0, _chai.expect)(reason.prop('type')).equal('text');\n(0, _chai.expect)(reason.prop('label')).equal('Reason');",
                "err": {},
                "isRoot": false,
                "uuid": "594783dc-c6a7-4afb-a63c-e8f31139a71d",
                "parentUUID": "5c9bcd2b-4b98-486c-b053-cecf572b6b85",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should render leaveType",
                "fullTitle": "Leave Form Component Render should render leaveType",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var leaveType = wrapper.find('FormGroup');\n(0, _chai.expect)(leaveType.find('ControlLabel').prop('children')).equal('Leave Type');\nvar options = leaveType.find('FormControl');\n(0, _chai.expect)(options.childAt(0).prop('children')).equal('Paid Leaves');\n(0, _chai.expect)(options.childAt(1).prop('children')).equal('Leave Without Pay');\n(0, _chai.expect)(options.childAt(2).prop('children')).equal('Compensation Off');",
                "err": {},
                "isRoot": false,
                "uuid": "8937cd23-031d-45e9-8651-dd70845492dd",
                "parentUUID": "5c9bcd2b-4b98-486c-b053-cecf572b6b85",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should render Submit Button",
                "fullTitle": "Leave Form Component Render should render Submit Button",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var submitBtn = wrapper.find('#submitBtn');\n(0, _chai.expect)(submitBtn.type()).equal(_reactBootstrap.Button);\n(0, _chai.expect)(submitBtn.prop('children')).equal('Submit');",
                "err": {},
                "isRoot": false,
                "uuid": "c0bc93ce-c723-490f-ab4c-3b3cb7d89287",
                "parentUUID": "5c9bcd2b-4b98-486c-b053-cecf572b6b85",
                "isHook": false,
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/test/leaves/components/leaveFormSpec.js",
            "uuid": "5c9bcd2b-4b98-486c-b053-cecf572b6b85",
            "beforeHooks": [],
            "afterHooks": [],
            "fullFile": "/Users/kunalhire/workspace/leave-management-system/test/leaves/components/leaveFormSpec.js",
            "passes": [
              {
                "title": "should have the correct form name",
                "fullTitle": "Leave Form Component Render should have the correct form name",
                "timedOut": false,
                "duration": 3,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var title = wrapper.find('h2');\n(0, _chai.expect)(title.text()).equal(\"Leave Management System\");",
                "err": {},
                "isRoot": false,
                "uuid": "cb8c23e3-4ddc-46d0-9447-26c80194fdff",
                "parentUUID": "5c9bcd2b-4b98-486c-b053-cecf572b6b85",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should render fromDate",
                "fullTitle": "Leave Form Component Render should render fromDate",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var fromDate = wrapper.find('#fromDate');\n(0, _chai.expect)(fromDate.type()).equal(_fieldGroup2.default);\n(0, _chai.expect)(fromDate.prop('type')).equal('date');\n(0, _chai.expect)(fromDate.prop('label')).equal('From');",
                "err": {},
                "isRoot": false,
                "uuid": "266690b4-049b-4d40-be40-79513d40e568",
                "parentUUID": "5c9bcd2b-4b98-486c-b053-cecf572b6b85",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should render toDate",
                "fullTitle": "Leave Form Component Render should render toDate",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var toDate = wrapper.find('#toDate');\n(0, _chai.expect)(toDate.type()).equal(_fieldGroup2.default);\n(0, _chai.expect)(toDate.prop('type')).equal('date');\n(0, _chai.expect)(toDate.prop('label')).equal('To');",
                "err": {},
                "isRoot": false,
                "uuid": "1e03dc4a-0c2f-4cec-96c2-c3bc4f014b31",
                "parentUUID": "5c9bcd2b-4b98-486c-b053-cecf572b6b85",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should render reason",
                "fullTitle": "Leave Form Component Render should render reason",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var reason = wrapper.find('#reason');\n(0, _chai.expect)(reason.type()).equal(_fieldGroup2.default);\n(0, _chai.expect)(reason.prop('type')).equal('text');\n(0, _chai.expect)(reason.prop('label')).equal('Reason');",
                "err": {},
                "isRoot": false,
                "uuid": "594783dc-c6a7-4afb-a63c-e8f31139a71d",
                "parentUUID": "5c9bcd2b-4b98-486c-b053-cecf572b6b85",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should render leaveType",
                "fullTitle": "Leave Form Component Render should render leaveType",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var leaveType = wrapper.find('FormGroup');\n(0, _chai.expect)(leaveType.find('ControlLabel').prop('children')).equal('Leave Type');\nvar options = leaveType.find('FormControl');\n(0, _chai.expect)(options.childAt(0).prop('children')).equal('Paid Leaves');\n(0, _chai.expect)(options.childAt(1).prop('children')).equal('Leave Without Pay');\n(0, _chai.expect)(options.childAt(2).prop('children')).equal('Compensation Off');",
                "err": {},
                "isRoot": false,
                "uuid": "8937cd23-031d-45e9-8651-dd70845492dd",
                "parentUUID": "5c9bcd2b-4b98-486c-b053-cecf572b6b85",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should render Submit Button",
                "fullTitle": "Leave Form Component Render should render Submit Button",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var submitBtn = wrapper.find('#submitBtn');\n(0, _chai.expect)(submitBtn.type()).equal(_reactBootstrap.Button);\n(0, _chai.expect)(submitBtn.prop('children')).equal('Submit');",
                "err": {},
                "isRoot": false,
                "uuid": "c0bc93ce-c723-490f-ab4c-3b3cb7d89287",
                "parentUUID": "5c9bcd2b-4b98-486c-b053-cecf572b6b85",
                "isHook": false,
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasBeforeHooks": false,
            "hasAfterHooks": false,
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 6,
            "totalPasses": 6,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 4,
            "rootEmpty": false
          },
          {
            "title": "Event Handlers",
            "suites": [],
            "tests": [
              {
                "title": "should update fromDate when it is changed",
                "fullTitle": "Leave Form Component Event Handlers should update fromDate when it is changed",
                "timedOut": false,
                "duration": 4,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var fromDate = wrapper.find('#fromDate');\nfromDate.simulate('change', { target: { value: '2018-04-01' } });\n(0, _chai.expect)(wrapper.state().fromDate.toString()).equal('Sun Apr 01 2018 02:00:00 GMT+0200 (CEST)');",
                "err": {},
                "isRoot": false,
                "uuid": "86474f15-52d1-40da-b7bd-3238cdffee57",
                "parentUUID": "3073c367-1fe1-4492-a516-44d100c5e91e",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should update toDate when it is changed",
                "fullTitle": "Leave Form Component Event Handlers should update toDate when it is changed",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var toDate = wrapper.find('#toDate');\ntoDate.simulate('change', { target: { value: '2018-04-03' } });\n(0, _chai.expect)(wrapper.state().toDate.toString()).equal('Tue Apr 03 2018 02:00:00 GMT+0200 (CEST)');",
                "err": {},
                "isRoot": false,
                "uuid": "2a2d26b4-d578-42e8-8f3d-b7870d7c874e",
                "parentUUID": "3073c367-1fe1-4492-a516-44d100c5e91e",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should update reason when it is changed",
                "fullTitle": "Leave Form Component Event Handlers should update reason when it is changed",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var reason = wrapper.find('#reason');\nreason.simulate('change', { target: { value: 'Vacations' } });\n(0, _chai.expect)(wrapper.state().reason.toString()).equal('Vacations');",
                "err": {},
                "isRoot": false,
                "uuid": "07a619c9-54ac-4d37-bc0b-e61511492842",
                "parentUUID": "3073c367-1fe1-4492-a516-44d100c5e91e",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should update leave type when it is changed",
                "fullTitle": "Leave Form Component Event Handlers should update leave type when it is changed",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var leaveType = wrapper.find('FormControl');\nleaveType.simulate('change', { target: { value: 'LOP' } });\n(0, _chai.expect)(wrapper.state().type.toString()).equal('LOP');",
                "err": {},
                "isRoot": false,
                "uuid": "7ae384a8-781c-4458-961f-81948bcecb59",
                "parentUUID": "3073c367-1fe1-4492-a516-44d100c5e91e",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should submit leave when clicked on Submit",
                "fullTitle": "Leave Form Component Event Handlers should submit leave when clicked on Submit",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var submitBtn = wrapper.find('#submitBtn');\nsubmitBtn.simulate('click', { preventDefault: function preventDefault() {} });\n(0, _chai.expect)(submitLeaveStub.called).equal(true);",
                "err": {},
                "isRoot": false,
                "uuid": "5eb13422-6ae2-4d87-9500-d73b085f6a30",
                "parentUUID": "3073c367-1fe1-4492-a516-44d100c5e91e",
                "isHook": false,
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/test/leaves/components/leaveFormSpec.js",
            "uuid": "3073c367-1fe1-4492-a516-44d100c5e91e",
            "beforeHooks": [],
            "afterHooks": [],
            "fullFile": "/Users/kunalhire/workspace/leave-management-system/test/leaves/components/leaveFormSpec.js",
            "passes": [
              {
                "title": "should update fromDate when it is changed",
                "fullTitle": "Leave Form Component Event Handlers should update fromDate when it is changed",
                "timedOut": false,
                "duration": 4,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var fromDate = wrapper.find('#fromDate');\nfromDate.simulate('change', { target: { value: '2018-04-01' } });\n(0, _chai.expect)(wrapper.state().fromDate.toString()).equal('Sun Apr 01 2018 02:00:00 GMT+0200 (CEST)');",
                "err": {},
                "isRoot": false,
                "uuid": "86474f15-52d1-40da-b7bd-3238cdffee57",
                "parentUUID": "3073c367-1fe1-4492-a516-44d100c5e91e",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should update toDate when it is changed",
                "fullTitle": "Leave Form Component Event Handlers should update toDate when it is changed",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var toDate = wrapper.find('#toDate');\ntoDate.simulate('change', { target: { value: '2018-04-03' } });\n(0, _chai.expect)(wrapper.state().toDate.toString()).equal('Tue Apr 03 2018 02:00:00 GMT+0200 (CEST)');",
                "err": {},
                "isRoot": false,
                "uuid": "2a2d26b4-d578-42e8-8f3d-b7870d7c874e",
                "parentUUID": "3073c367-1fe1-4492-a516-44d100c5e91e",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should update reason when it is changed",
                "fullTitle": "Leave Form Component Event Handlers should update reason when it is changed",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var reason = wrapper.find('#reason');\nreason.simulate('change', { target: { value: 'Vacations' } });\n(0, _chai.expect)(wrapper.state().reason.toString()).equal('Vacations');",
                "err": {},
                "isRoot": false,
                "uuid": "07a619c9-54ac-4d37-bc0b-e61511492842",
                "parentUUID": "3073c367-1fe1-4492-a516-44d100c5e91e",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should update leave type when it is changed",
                "fullTitle": "Leave Form Component Event Handlers should update leave type when it is changed",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var leaveType = wrapper.find('FormControl');\nleaveType.simulate('change', { target: { value: 'LOP' } });\n(0, _chai.expect)(wrapper.state().type.toString()).equal('LOP');",
                "err": {},
                "isRoot": false,
                "uuid": "7ae384a8-781c-4458-961f-81948bcecb59",
                "parentUUID": "3073c367-1fe1-4492-a516-44d100c5e91e",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should submit leave when clicked on Submit",
                "fullTitle": "Leave Form Component Event Handlers should submit leave when clicked on Submit",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var submitBtn = wrapper.find('#submitBtn');\nsubmitBtn.simulate('click', { preventDefault: function preventDefault() {} });\n(0, _chai.expect)(submitLeaveStub.called).equal(true);",
                "err": {},
                "isRoot": false,
                "uuid": "5eb13422-6ae2-4d87-9500-d73b085f6a30",
                "parentUUID": "3073c367-1fe1-4492-a516-44d100c5e91e",
                "isHook": false,
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasBeforeHooks": false,
            "hasAfterHooks": false,
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 5,
            "totalPasses": 5,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 8,
            "rootEmpty": false
          }
        ],
        "tests": [],
        "pending": [],
        "root": false,
        "_timeout": 2000,
        "file": "/test/leaves/components/leaveFormSpec.js",
        "uuid": "c22f3082-7dd5-4593-9d84-81869cef1718",
        "beforeHooks": [
          {
            "title": "\"before each\" hook",
            "fullTitle": "Leave Form Component \"before each\" hook",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "wrapper = (0, _enzyme.shallow)(_react2.default.createElement(_leaveForm2.default, { fetchLeave: fetchLeaveStub, submitLeave: submitLeaveStub, leaves: [] }));",
            "err": {},
            "isRoot": false,
            "uuid": "7ab56e6c-78f5-4013-86d6-f2f02e8d0a8f",
            "parentUUID": "c22f3082-7dd5-4593-9d84-81869cef1718",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [],
        "fullFile": "/Users/kunalhire/workspace/leave-management-system/test/leaves/components/leaveFormSpec.js",
        "passes": [],
        "failures": [],
        "skipped": [],
        "hasBeforeHooks": true,
        "hasAfterHooks": false,
        "hasTests": false,
        "hasSuites": true,
        "totalTests": 0,
        "totalPasses": 0,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": false,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 0,
        "rootEmpty": false
      },
      {
        "title": "Leave Form Container",
        "suites": [],
        "tests": [
          {
            "title": "should dispatch an action to fetch a leave",
            "fullTitle": "Leave Form Container should dispatch an action to fetch a leave",
            "timedOut": false,
            "duration": 9,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var shallowWrapper = wrapper.dive({ context: { store: store } });\nshallowWrapper.prop('fetchLeave')();\nvar executedAction = store.getActions()[0];\n(0, _chai.expect)(executedAction.type).equal('LEAVE_FETCHING');\n(0, _chai.expect)(executedAction.leaveId).equal(1234);",
            "err": {},
            "isRoot": false,
            "uuid": "118b6176-e7a6-42d5-9f13-2cf9f78f5163",
            "parentUUID": "d60723f4-4992-4373-9c26-055740a1b71e",
            "isHook": false,
            "skipped": false
          }
        ],
        "pending": [],
        "root": false,
        "_timeout": 2000,
        "file": "/test/leaves/container/leaveFormSpec.js",
        "uuid": "d60723f4-4992-4373-9c26-055740a1b71e",
        "beforeHooks": [
          {
            "title": "\"before each\" hook",
            "fullTitle": "Leave Form Container \"before each\" hook",
            "timedOut": false,
            "duration": 1,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "wrapper = (0, _enzyme.shallow)(_react2.default.createElement(\n    _reactRedux.Provider,\n    { store: store },\n    _react2.default.createElement(_leaveForm2.default, { params: { leaveId: 1234 } })\n));",
            "err": {},
            "isRoot": false,
            "uuid": "f0f99301-e049-4080-a77a-e142d58971bd",
            "parentUUID": "d60723f4-4992-4373-9c26-055740a1b71e",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [],
        "fullFile": "/Users/kunalhire/workspace/leave-management-system/test/leaves/container/leaveFormSpec.js",
        "passes": [
          {
            "title": "should dispatch an action to fetch a leave",
            "fullTitle": "Leave Form Container should dispatch an action to fetch a leave",
            "timedOut": false,
            "duration": 9,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var shallowWrapper = wrapper.dive({ context: { store: store } });\nshallowWrapper.prop('fetchLeave')();\nvar executedAction = store.getActions()[0];\n(0, _chai.expect)(executedAction.type).equal('LEAVE_FETCHING');\n(0, _chai.expect)(executedAction.leaveId).equal(1234);",
            "err": {},
            "isRoot": false,
            "uuid": "118b6176-e7a6-42d5-9f13-2cf9f78f5163",
            "parentUUID": "d60723f4-4992-4373-9c26-055740a1b71e",
            "isHook": false,
            "skipped": false
          }
        ],
        "failures": [],
        "skipped": [],
        "hasBeforeHooks": true,
        "hasAfterHooks": false,
        "hasTests": true,
        "hasSuites": false,
        "totalTests": 1,
        "totalPasses": 1,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": true,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 9,
        "rootEmpty": false
      },
      {
        "title": "Leaves Action",
        "suites": [],
        "tests": [
          {
            "title": "should dispatch correct action when fetchLeave is called",
            "fullTitle": "Leaves Action should dispatch correct action when fetchLeave is called",
            "timedOut": false,
            "duration": 17,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var request = api.get('/leaves/1234').reply(200, leaveFormStub);\nstore.dispatch(_leavesActions.leavesActions.fetchLeave(1234)).then(function (resp) {\n    request.done();\n    var executedActions = store.getActions();\n    (0, _chai.expect)(executedActions[0].type).to.equal(_leavesActions.constants.LEAVE_FETCHING);\n    (0, _chai.expect)(executedActions[1].type).to.equal(_leavesActions.constants.LEAVE_FETCHED);\n    (0, _chai.expect)(executedActions[1].leave).to.deep.equal(leaveFormStub);\n    done();\n}).catch(done);",
            "err": {},
            "isRoot": false,
            "uuid": "93b417b1-a6ad-4cbb-9dec-5268494b2c83",
            "parentUUID": "41b50159-741b-42ec-87a3-2631e499b656",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "should dispatch correct action when fetchLeave is called and returned error",
            "fullTitle": "Leaves Action should dispatch correct action when fetchLeave is called and returned error",
            "timedOut": false,
            "duration": 1,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var error = { error: 'error' };\nvar request = api.get('/leaves/1234').reply(500, error);\nstore.dispatch(_leavesActions.leavesActions.fetchLeave(1234)).then(function (resp) {\n    request.done();\n    var executedActions = store.getActions();\n    (0, _chai.expect)(executedActions[0].type).to.equal(_leavesActions.constants.LEAVE_FETCHING);\n    (0, _chai.expect)(executedActions[1].type).to.equal(_leavesActions.constants.LEAVE_ERROR);\n    (0, _chai.expect)(executedActions[1].error).to.deep.equal('Unable to retrieve the leave with id 1234: 500 (Internal Server Error)');\n    done();\n}).catch(done);",
            "err": {},
            "isRoot": false,
            "uuid": "1975c757-ee4f-4df0-9016-978d096f39ae",
            "parentUUID": "41b50159-741b-42ec-87a3-2631e499b656",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "should dispatch correct action when fetchLeaves is called",
            "fullTitle": "Leaves Action should dispatch correct action when fetchLeaves is called",
            "timedOut": false,
            "duration": 1,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var request = api.get('/leaves').reply(200, [leaveFormStub]);\nstore.dispatch(_leavesActions.leavesActions.fetchLeaves(1234)).then(function (resp) {\n    request.done();\n    var executedActions = store.getActions();\n    (0, _chai.expect)(executedActions[0].type).to.equal(_leavesActions.constants.LEAVE_FETCHING);\n    (0, _chai.expect)(executedActions[1].type).to.equal(_leavesActions.constants.LEAVES_FETCHED);\n    (0, _chai.expect)(executedActions[1].leaves).to.deep.equal([leaveFormStub]);\n    done();\n}).catch(done);",
            "err": {},
            "isRoot": false,
            "uuid": "62228380-eaed-4e0f-a077-ba8d53a2172b",
            "parentUUID": "41b50159-741b-42ec-87a3-2631e499b656",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "should dispatch correct action when fetchLeaves is called and returned error",
            "fullTitle": "Leaves Action should dispatch correct action when fetchLeaves is called and returned error",
            "timedOut": false,
            "duration": 1,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var error = { error: 'error' };\nvar request = api.get('/leaves').reply(500, error);\nstore.dispatch(_leavesActions.leavesActions.fetchLeaves(1234)).then(function (resp) {\n    request.done();\n    var executedActions = store.getActions();\n    (0, _chai.expect)(executedActions[0].type).to.equal(_leavesActions.constants.LEAVE_FETCHING);\n    (0, _chai.expect)(executedActions[1].type).to.equal(_leavesActions.constants.LEAVE_ERROR);\n    (0, _chai.expect)(executedActions[1].error).to.deep.equal('Unable to retrieve the leaves: 500 (Internal Server Error)');\n    done();\n}).catch(done);",
            "err": {},
            "isRoot": false,
            "uuid": "df493a66-a10d-49f3-bb12-fdf7cba699d1",
            "parentUUID": "41b50159-741b-42ec-87a3-2631e499b656",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "should dispatch correct action when submitLeave is called",
            "fullTitle": "Leaves Action should dispatch correct action when submitLeave is called",
            "timedOut": false,
            "duration": 2,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var request = api.post('/leaves/').reply(201, leaveFormStub);\nstore.dispatch(_leavesActions.leavesActions.submitLeave(leaveFormStub)).then(function (resp) {\n    request.done();\n    var executedActions = store.getActions();\n    (0, _chai.expect)(executedActions[0].type).to.equal(_leavesActions.constants.LEAVE_FETCHED);\n    (0, _chai.expect)(executedActions[0].resp).to.deep.equal(leaveFormStub);\n    (0, _chai.expect)(executedActions[1].type).to.equal('@@router/CALL_HISTORY_METHOD');\n    (0, _chai.expect)(executedActions[1].payload).to.deep.equal({ method: 'push', args: ['/'] });\n    done();\n}).catch(done);",
            "err": {},
            "isRoot": false,
            "uuid": "18dc74ca-7ad1-405d-a6ad-413a59ccc386",
            "parentUUID": "41b50159-741b-42ec-87a3-2631e499b656",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "should dispatch correct action when submitLeave is called and returned error",
            "fullTitle": "Leaves Action should dispatch correct action when submitLeave is called and returned error",
            "timedOut": false,
            "duration": 1,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var error = { error: 'error' };\nvar request = api.post('/leaves/').reply(500, error);\nstore.dispatch(_leavesActions.leavesActions.submitLeave(leaveFormStub)).then(function (resp) {\n    request.done();\n    var executedActions = store.getActions();\n    (0, _chai.expect)(executedActions[0].type).to.equal(_leavesActions.constants.LEAVE_ERROR);\n    (0, _chai.expect)(executedActions[0].error).to.deep.equal('Unable to submit the leave: 500 (Internal Server Error)');\n    done();\n}).catch(done);",
            "err": {},
            "isRoot": false,
            "uuid": "01bac712-f22e-4dcd-bd1e-dec73637110b",
            "parentUUID": "41b50159-741b-42ec-87a3-2631e499b656",
            "isHook": false,
            "skipped": false
          }
        ],
        "pending": [],
        "root": false,
        "_timeout": 2000,
        "file": "/test/leaves/leavesActionSpec.js",
        "uuid": "41b50159-741b-42ec-87a3-2631e499b656",
        "beforeHooks": [
          {
            "title": "\"before all\" hook",
            "fullTitle": "Leaves Action \"before all\" hook",
            "timedOut": false,
            "duration": 1,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "mockStore = (0, _reduxMockStore2.default)([_reduxThunk2.default]);\napi = (0, _nock2.default)(_http.config.serverUrl);",
            "err": {},
            "isRoot": false,
            "uuid": "d1a13782-078a-4e74-87bf-ba0fc8e2ae42",
            "parentUUID": "41b50159-741b-42ec-87a3-2631e499b656",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook",
            "fullTitle": "Leaves Action \"before each\" hook",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "store = mockStore({});",
            "err": {},
            "isRoot": false,
            "uuid": "07fcea13-d0fc-469a-9b8b-a263864f3b36",
            "parentUUID": "41b50159-741b-42ec-87a3-2631e499b656",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [
          {
            "title": "\"after each\" hook",
            "fullTitle": "Leaves Action \"after each\" hook",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "store.clearActions();\n_nock2.default.cleanAll();",
            "err": {},
            "isRoot": false,
            "uuid": "c51d7948-422b-4275-80ac-3148b8b1f513",
            "parentUUID": "41b50159-741b-42ec-87a3-2631e499b656",
            "isHook": true,
            "skipped": false
          }
        ],
        "fullFile": "/Users/kunalhire/workspace/leave-management-system/test/leaves/leavesActionSpec.js",
        "passes": [
          {
            "title": "should dispatch correct action when fetchLeave is called",
            "fullTitle": "Leaves Action should dispatch correct action when fetchLeave is called",
            "timedOut": false,
            "duration": 17,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var request = api.get('/leaves/1234').reply(200, leaveFormStub);\nstore.dispatch(_leavesActions.leavesActions.fetchLeave(1234)).then(function (resp) {\n    request.done();\n    var executedActions = store.getActions();\n    (0, _chai.expect)(executedActions[0].type).to.equal(_leavesActions.constants.LEAVE_FETCHING);\n    (0, _chai.expect)(executedActions[1].type).to.equal(_leavesActions.constants.LEAVE_FETCHED);\n    (0, _chai.expect)(executedActions[1].leave).to.deep.equal(leaveFormStub);\n    done();\n}).catch(done);",
            "err": {},
            "isRoot": false,
            "uuid": "93b417b1-a6ad-4cbb-9dec-5268494b2c83",
            "parentUUID": "41b50159-741b-42ec-87a3-2631e499b656",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "should dispatch correct action when fetchLeave is called and returned error",
            "fullTitle": "Leaves Action should dispatch correct action when fetchLeave is called and returned error",
            "timedOut": false,
            "duration": 1,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var error = { error: 'error' };\nvar request = api.get('/leaves/1234').reply(500, error);\nstore.dispatch(_leavesActions.leavesActions.fetchLeave(1234)).then(function (resp) {\n    request.done();\n    var executedActions = store.getActions();\n    (0, _chai.expect)(executedActions[0].type).to.equal(_leavesActions.constants.LEAVE_FETCHING);\n    (0, _chai.expect)(executedActions[1].type).to.equal(_leavesActions.constants.LEAVE_ERROR);\n    (0, _chai.expect)(executedActions[1].error).to.deep.equal('Unable to retrieve the leave with id 1234: 500 (Internal Server Error)');\n    done();\n}).catch(done);",
            "err": {},
            "isRoot": false,
            "uuid": "1975c757-ee4f-4df0-9016-978d096f39ae",
            "parentUUID": "41b50159-741b-42ec-87a3-2631e499b656",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "should dispatch correct action when fetchLeaves is called",
            "fullTitle": "Leaves Action should dispatch correct action when fetchLeaves is called",
            "timedOut": false,
            "duration": 1,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var request = api.get('/leaves').reply(200, [leaveFormStub]);\nstore.dispatch(_leavesActions.leavesActions.fetchLeaves(1234)).then(function (resp) {\n    request.done();\n    var executedActions = store.getActions();\n    (0, _chai.expect)(executedActions[0].type).to.equal(_leavesActions.constants.LEAVE_FETCHING);\n    (0, _chai.expect)(executedActions[1].type).to.equal(_leavesActions.constants.LEAVES_FETCHED);\n    (0, _chai.expect)(executedActions[1].leaves).to.deep.equal([leaveFormStub]);\n    done();\n}).catch(done);",
            "err": {},
            "isRoot": false,
            "uuid": "62228380-eaed-4e0f-a077-ba8d53a2172b",
            "parentUUID": "41b50159-741b-42ec-87a3-2631e499b656",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "should dispatch correct action when fetchLeaves is called and returned error",
            "fullTitle": "Leaves Action should dispatch correct action when fetchLeaves is called and returned error",
            "timedOut": false,
            "duration": 1,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var error = { error: 'error' };\nvar request = api.get('/leaves').reply(500, error);\nstore.dispatch(_leavesActions.leavesActions.fetchLeaves(1234)).then(function (resp) {\n    request.done();\n    var executedActions = store.getActions();\n    (0, _chai.expect)(executedActions[0].type).to.equal(_leavesActions.constants.LEAVE_FETCHING);\n    (0, _chai.expect)(executedActions[1].type).to.equal(_leavesActions.constants.LEAVE_ERROR);\n    (0, _chai.expect)(executedActions[1].error).to.deep.equal('Unable to retrieve the leaves: 500 (Internal Server Error)');\n    done();\n}).catch(done);",
            "err": {},
            "isRoot": false,
            "uuid": "df493a66-a10d-49f3-bb12-fdf7cba699d1",
            "parentUUID": "41b50159-741b-42ec-87a3-2631e499b656",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "should dispatch correct action when submitLeave is called",
            "fullTitle": "Leaves Action should dispatch correct action when submitLeave is called",
            "timedOut": false,
            "duration": 2,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var request = api.post('/leaves/').reply(201, leaveFormStub);\nstore.dispatch(_leavesActions.leavesActions.submitLeave(leaveFormStub)).then(function (resp) {\n    request.done();\n    var executedActions = store.getActions();\n    (0, _chai.expect)(executedActions[0].type).to.equal(_leavesActions.constants.LEAVE_FETCHED);\n    (0, _chai.expect)(executedActions[0].resp).to.deep.equal(leaveFormStub);\n    (0, _chai.expect)(executedActions[1].type).to.equal('@@router/CALL_HISTORY_METHOD');\n    (0, _chai.expect)(executedActions[1].payload).to.deep.equal({ method: 'push', args: ['/'] });\n    done();\n}).catch(done);",
            "err": {},
            "isRoot": false,
            "uuid": "18dc74ca-7ad1-405d-a6ad-413a59ccc386",
            "parentUUID": "41b50159-741b-42ec-87a3-2631e499b656",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "should dispatch correct action when submitLeave is called and returned error",
            "fullTitle": "Leaves Action should dispatch correct action when submitLeave is called and returned error",
            "timedOut": false,
            "duration": 1,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var error = { error: 'error' };\nvar request = api.post('/leaves/').reply(500, error);\nstore.dispatch(_leavesActions.leavesActions.submitLeave(leaveFormStub)).then(function (resp) {\n    request.done();\n    var executedActions = store.getActions();\n    (0, _chai.expect)(executedActions[0].type).to.equal(_leavesActions.constants.LEAVE_ERROR);\n    (0, _chai.expect)(executedActions[0].error).to.deep.equal('Unable to submit the leave: 500 (Internal Server Error)');\n    done();\n}).catch(done);",
            "err": {},
            "isRoot": false,
            "uuid": "01bac712-f22e-4dcd-bd1e-dec73637110b",
            "parentUUID": "41b50159-741b-42ec-87a3-2631e499b656",
            "isHook": false,
            "skipped": false
          }
        ],
        "failures": [],
        "skipped": [],
        "hasBeforeHooks": true,
        "hasAfterHooks": true,
        "hasTests": true,
        "hasSuites": false,
        "totalTests": 6,
        "totalPasses": 6,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": true,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 23,
        "rootEmpty": false
      },
      {
        "title": "Leaves Reducer",
        "suites": [],
        "tests": [
          {
            "title": "should return the initial state",
            "fullTitle": "Leaves Reducer should return the initial state",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "(0, _chai.expect)((0, _leavesReducer2.default)(undefined, {})).deep.equal({ leaves: [], leave: {} });",
            "err": {},
            "isRoot": false,
            "uuid": "0d30ed9c-5abd-4430-9e97-e2c14481202b",
            "parentUUID": "2da9af6a-b2e4-4e32-a209-e78fc29b946a",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "should return a new state with status LOADING when a LEAVE_FETCHING action is received",
            "fullTitle": "Leaves Reducer should return a new state with status LOADING when a LEAVE_FETCHING action is received",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var action = { type: _leavesActions.constants.LEAVE_FETCHING };\nvar updatedState = (0, _leavesReducer2.default)(undefined, action);\n(0, _chai.expect)(updatedState.status).to.equal(\"LOADING\");",
            "err": {},
            "isRoot": false,
            "uuid": "dbae2a19-efd8-49a8-9357-48d0128f2e8c",
            "parentUUID": "2da9af6a-b2e4-4e32-a209-e78fc29b946a",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "should return a new state with status LOADING when a LEAVE_FETCHED action is received",
            "fullTitle": "Leaves Reducer should return a new state with status LOADING when a LEAVE_FETCHED action is received",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var leave = { dummy: 'dummy' };\nvar action = { type: _leavesActions.constants.LEAVE_FETCHED, leave: leave };\nvar updatedState = (0, _leavesReducer2.default)(undefined, action);\n(0, _chai.expect)(updatedState.leave).deep.equal(leave);",
            "err": {},
            "isRoot": false,
            "uuid": "e1381cd1-8c4b-47c2-9489-026fc4eaa7e9",
            "parentUUID": "2da9af6a-b2e4-4e32-a209-e78fc29b946a",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "should return a new state with status LOADING when a LEAVES_FETCHED action is received",
            "fullTitle": "Leaves Reducer should return a new state with status LOADING when a LEAVES_FETCHED action is received",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var leave = { dummy: 'dummy' };\nvar action = { type: _leavesActions.constants.LEAVES_FETCHED, leaves: [leave] };\nvar updatedState = (0, _leavesReducer2.default)(undefined, action);\n(0, _chai.expect)(updatedState.leaves).deep.equal([leave]);",
            "err": {},
            "isRoot": false,
            "uuid": "475e19d8-6204-4d9f-8a0a-4b943f1d15b9",
            "parentUUID": "2da9af6a-b2e4-4e32-a209-e78fc29b946a",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "should return a new state with status LOADING when a LEAVE_ERROR action is received",
            "fullTitle": "Leaves Reducer should return a new state with status LOADING when a LEAVE_ERROR action is received",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var error = { error: 'dummy' };\nvar action = { type: _leavesActions.constants.LEAVE_ERROR, error: error };\nvar updatedState = (0, _leavesReducer2.default)(undefined, action);\n(0, _chai.expect)(updatedState.error).deep.equal(error);",
            "err": {},
            "isRoot": false,
            "uuid": "7ab83adc-322c-44e2-8863-0d66d5fd2d14",
            "parentUUID": "2da9af6a-b2e4-4e32-a209-e78fc29b946a",
            "isHook": false,
            "skipped": false
          }
        ],
        "pending": [],
        "root": false,
        "_timeout": 2000,
        "file": "/test/leaves/leavesReducerSpec.js",
        "uuid": "2da9af6a-b2e4-4e32-a209-e78fc29b946a",
        "beforeHooks": [],
        "afterHooks": [],
        "fullFile": "/Users/kunalhire/workspace/leave-management-system/test/leaves/leavesReducerSpec.js",
        "passes": [
          {
            "title": "should return the initial state",
            "fullTitle": "Leaves Reducer should return the initial state",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "(0, _chai.expect)((0, _leavesReducer2.default)(undefined, {})).deep.equal({ leaves: [], leave: {} });",
            "err": {},
            "isRoot": false,
            "uuid": "0d30ed9c-5abd-4430-9e97-e2c14481202b",
            "parentUUID": "2da9af6a-b2e4-4e32-a209-e78fc29b946a",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "should return a new state with status LOADING when a LEAVE_FETCHING action is received",
            "fullTitle": "Leaves Reducer should return a new state with status LOADING when a LEAVE_FETCHING action is received",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var action = { type: _leavesActions.constants.LEAVE_FETCHING };\nvar updatedState = (0, _leavesReducer2.default)(undefined, action);\n(0, _chai.expect)(updatedState.status).to.equal(\"LOADING\");",
            "err": {},
            "isRoot": false,
            "uuid": "dbae2a19-efd8-49a8-9357-48d0128f2e8c",
            "parentUUID": "2da9af6a-b2e4-4e32-a209-e78fc29b946a",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "should return a new state with status LOADING when a LEAVE_FETCHED action is received",
            "fullTitle": "Leaves Reducer should return a new state with status LOADING when a LEAVE_FETCHED action is received",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var leave = { dummy: 'dummy' };\nvar action = { type: _leavesActions.constants.LEAVE_FETCHED, leave: leave };\nvar updatedState = (0, _leavesReducer2.default)(undefined, action);\n(0, _chai.expect)(updatedState.leave).deep.equal(leave);",
            "err": {},
            "isRoot": false,
            "uuid": "e1381cd1-8c4b-47c2-9489-026fc4eaa7e9",
            "parentUUID": "2da9af6a-b2e4-4e32-a209-e78fc29b946a",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "should return a new state with status LOADING when a LEAVES_FETCHED action is received",
            "fullTitle": "Leaves Reducer should return a new state with status LOADING when a LEAVES_FETCHED action is received",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var leave = { dummy: 'dummy' };\nvar action = { type: _leavesActions.constants.LEAVES_FETCHED, leaves: [leave] };\nvar updatedState = (0, _leavesReducer2.default)(undefined, action);\n(0, _chai.expect)(updatedState.leaves).deep.equal([leave]);",
            "err": {},
            "isRoot": false,
            "uuid": "475e19d8-6204-4d9f-8a0a-4b943f1d15b9",
            "parentUUID": "2da9af6a-b2e4-4e32-a209-e78fc29b946a",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "should return a new state with status LOADING when a LEAVE_ERROR action is received",
            "fullTitle": "Leaves Reducer should return a new state with status LOADING when a LEAVE_ERROR action is received",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var error = { error: 'dummy' };\nvar action = { type: _leavesActions.constants.LEAVE_ERROR, error: error };\nvar updatedState = (0, _leavesReducer2.default)(undefined, action);\n(0, _chai.expect)(updatedState.error).deep.equal(error);",
            "err": {},
            "isRoot": false,
            "uuid": "7ab83adc-322c-44e2-8863-0d66d5fd2d14",
            "parentUUID": "2da9af6a-b2e4-4e32-a209-e78fc29b946a",
            "isHook": false,
            "skipped": false
          }
        ],
        "failures": [],
        "skipped": [],
        "hasBeforeHooks": false,
        "hasAfterHooks": false,
        "hasTests": true,
        "hasSuites": false,
        "totalTests": 5,
        "totalPasses": 5,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": true,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 0,
        "rootEmpty": false
      }
    ],
    "tests": [],
    "pending": [],
    "root": true,
    "_timeout": 2000,
    "uuid": "5e2e331e-a779-4f99-8be0-603e33c5622a",
    "beforeHooks": [],
    "afterHooks": [],
    "fullFile": "",
    "file": "",
    "passes": [],
    "failures": [],
    "skipped": [],
    "hasBeforeHooks": false,
    "hasAfterHooks": false,
    "hasTests": false,
    "hasSuites": true,
    "totalTests": 0,
    "totalPasses": 0,
    "totalFailures": 0,
    "totalPending": 0,
    "totalSkipped": 0,
    "hasPasses": false,
    "hasFailures": false,
    "hasPending": false,
    "hasSkipped": false,
    "duration": 0,
    "rootEmpty": true
  },
  "allTests": [
    {
      "title": "should have the correct form name",
      "fullTitle": "Render should have the correct form name",
      "timedOut": false,
      "duration": 3,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var title = wrapper.find('h2');\n(0, _chai.expect)(title.text()).equal(\"Leave Management System\");",
      "err": {},
      "isRoot": false,
      "uuid": "cb8c23e3-4ddc-46d0-9447-26c80194fdff",
      "parentUUID": "5c9bcd2b-4b98-486c-b053-cecf572b6b85",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should render fromDate",
      "fullTitle": "Render should render fromDate",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var fromDate = wrapper.find('#fromDate');\n(0, _chai.expect)(fromDate.type()).equal(_fieldGroup2.default);\n(0, _chai.expect)(fromDate.prop('type')).equal('date');\n(0, _chai.expect)(fromDate.prop('label')).equal('From');",
      "err": {},
      "isRoot": false,
      "uuid": "266690b4-049b-4d40-be40-79513d40e568",
      "parentUUID": "5c9bcd2b-4b98-486c-b053-cecf572b6b85",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should render toDate",
      "fullTitle": "Render should render toDate",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var toDate = wrapper.find('#toDate');\n(0, _chai.expect)(toDate.type()).equal(_fieldGroup2.default);\n(0, _chai.expect)(toDate.prop('type')).equal('date');\n(0, _chai.expect)(toDate.prop('label')).equal('To');",
      "err": {},
      "isRoot": false,
      "uuid": "1e03dc4a-0c2f-4cec-96c2-c3bc4f014b31",
      "parentUUID": "5c9bcd2b-4b98-486c-b053-cecf572b6b85",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should render reason",
      "fullTitle": "Render should render reason",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var reason = wrapper.find('#reason');\n(0, _chai.expect)(reason.type()).equal(_fieldGroup2.default);\n(0, _chai.expect)(reason.prop('type')).equal('text');\n(0, _chai.expect)(reason.prop('label')).equal('Reason');",
      "err": {},
      "isRoot": false,
      "uuid": "594783dc-c6a7-4afb-a63c-e8f31139a71d",
      "parentUUID": "5c9bcd2b-4b98-486c-b053-cecf572b6b85",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should render leaveType",
      "fullTitle": "Render should render leaveType",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var leaveType = wrapper.find('FormGroup');\n(0, _chai.expect)(leaveType.find('ControlLabel').prop('children')).equal('Leave Type');\nvar options = leaveType.find('FormControl');\n(0, _chai.expect)(options.childAt(0).prop('children')).equal('Paid Leaves');\n(0, _chai.expect)(options.childAt(1).prop('children')).equal('Leave Without Pay');\n(0, _chai.expect)(options.childAt(2).prop('children')).equal('Compensation Off');",
      "err": {},
      "isRoot": false,
      "uuid": "8937cd23-031d-45e9-8651-dd70845492dd",
      "parentUUID": "5c9bcd2b-4b98-486c-b053-cecf572b6b85",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should render Submit Button",
      "fullTitle": "Render should render Submit Button",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var submitBtn = wrapper.find('#submitBtn');\n(0, _chai.expect)(submitBtn.type()).equal(_reactBootstrap.Button);\n(0, _chai.expect)(submitBtn.prop('children')).equal('Submit');",
      "err": {},
      "isRoot": false,
      "uuid": "c0bc93ce-c723-490f-ab4c-3b3cb7d89287",
      "parentUUID": "5c9bcd2b-4b98-486c-b053-cecf572b6b85",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should update fromDate when it is changed",
      "fullTitle": "Event Handlers should update fromDate when it is changed",
      "timedOut": false,
      "duration": 4,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var fromDate = wrapper.find('#fromDate');\nfromDate.simulate('change', { target: { value: '2018-04-01' } });\n(0, _chai.expect)(wrapper.state().fromDate.toString()).equal('Sun Apr 01 2018 02:00:00 GMT+0200 (CEST)');",
      "err": {},
      "isRoot": false,
      "uuid": "86474f15-52d1-40da-b7bd-3238cdffee57",
      "parentUUID": "3073c367-1fe1-4492-a516-44d100c5e91e",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should update toDate when it is changed",
      "fullTitle": "Event Handlers should update toDate when it is changed",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var toDate = wrapper.find('#toDate');\ntoDate.simulate('change', { target: { value: '2018-04-03' } });\n(0, _chai.expect)(wrapper.state().toDate.toString()).equal('Tue Apr 03 2018 02:00:00 GMT+0200 (CEST)');",
      "err": {},
      "isRoot": false,
      "uuid": "2a2d26b4-d578-42e8-8f3d-b7870d7c874e",
      "parentUUID": "3073c367-1fe1-4492-a516-44d100c5e91e",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should update reason when it is changed",
      "fullTitle": "Event Handlers should update reason when it is changed",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var reason = wrapper.find('#reason');\nreason.simulate('change', { target: { value: 'Vacations' } });\n(0, _chai.expect)(wrapper.state().reason.toString()).equal('Vacations');",
      "err": {},
      "isRoot": false,
      "uuid": "07a619c9-54ac-4d37-bc0b-e61511492842",
      "parentUUID": "3073c367-1fe1-4492-a516-44d100c5e91e",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should update leave type when it is changed",
      "fullTitle": "Event Handlers should update leave type when it is changed",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var leaveType = wrapper.find('FormControl');\nleaveType.simulate('change', { target: { value: 'LOP' } });\n(0, _chai.expect)(wrapper.state().type.toString()).equal('LOP');",
      "err": {},
      "isRoot": false,
      "uuid": "7ae384a8-781c-4458-961f-81948bcecb59",
      "parentUUID": "3073c367-1fe1-4492-a516-44d100c5e91e",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should submit leave when clicked on Submit",
      "fullTitle": "Event Handlers should submit leave when clicked on Submit",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var submitBtn = wrapper.find('#submitBtn');\nsubmitBtn.simulate('click', { preventDefault: function preventDefault() {} });\n(0, _chai.expect)(submitLeaveStub.called).equal(true);",
      "err": {},
      "isRoot": false,
      "uuid": "5eb13422-6ae2-4d87-9500-d73b085f6a30",
      "parentUUID": "3073c367-1fe1-4492-a516-44d100c5e91e",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should dispatch an action to fetch a leave",
      "fullTitle": "Leave Form Container should dispatch an action to fetch a leave",
      "timedOut": false,
      "duration": 9,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var shallowWrapper = wrapper.dive({ context: { store: store } });\nshallowWrapper.prop('fetchLeave')();\nvar executedAction = store.getActions()[0];\n(0, _chai.expect)(executedAction.type).equal('LEAVE_FETCHING');\n(0, _chai.expect)(executedAction.leaveId).equal(1234);",
      "err": {},
      "isRoot": false,
      "uuid": "118b6176-e7a6-42d5-9f13-2cf9f78f5163",
      "parentUUID": "d60723f4-4992-4373-9c26-055740a1b71e",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should dispatch correct action when fetchLeave is called",
      "fullTitle": "Leaves Action should dispatch correct action when fetchLeave is called",
      "timedOut": false,
      "duration": 17,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var request = api.get('/leaves/1234').reply(200, leaveFormStub);\nstore.dispatch(_leavesActions.leavesActions.fetchLeave(1234)).then(function (resp) {\n    request.done();\n    var executedActions = store.getActions();\n    (0, _chai.expect)(executedActions[0].type).to.equal(_leavesActions.constants.LEAVE_FETCHING);\n    (0, _chai.expect)(executedActions[1].type).to.equal(_leavesActions.constants.LEAVE_FETCHED);\n    (0, _chai.expect)(executedActions[1].leave).to.deep.equal(leaveFormStub);\n    done();\n}).catch(done);",
      "err": {},
      "isRoot": false,
      "uuid": "93b417b1-a6ad-4cbb-9dec-5268494b2c83",
      "parentUUID": "41b50159-741b-42ec-87a3-2631e499b656",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should dispatch correct action when fetchLeave is called and returned error",
      "fullTitle": "Leaves Action should dispatch correct action when fetchLeave is called and returned error",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var error = { error: 'error' };\nvar request = api.get('/leaves/1234').reply(500, error);\nstore.dispatch(_leavesActions.leavesActions.fetchLeave(1234)).then(function (resp) {\n    request.done();\n    var executedActions = store.getActions();\n    (0, _chai.expect)(executedActions[0].type).to.equal(_leavesActions.constants.LEAVE_FETCHING);\n    (0, _chai.expect)(executedActions[1].type).to.equal(_leavesActions.constants.LEAVE_ERROR);\n    (0, _chai.expect)(executedActions[1].error).to.deep.equal('Unable to retrieve the leave with id 1234: 500 (Internal Server Error)');\n    done();\n}).catch(done);",
      "err": {},
      "isRoot": false,
      "uuid": "1975c757-ee4f-4df0-9016-978d096f39ae",
      "parentUUID": "41b50159-741b-42ec-87a3-2631e499b656",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should dispatch correct action when fetchLeaves is called",
      "fullTitle": "Leaves Action should dispatch correct action when fetchLeaves is called",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var request = api.get('/leaves').reply(200, [leaveFormStub]);\nstore.dispatch(_leavesActions.leavesActions.fetchLeaves(1234)).then(function (resp) {\n    request.done();\n    var executedActions = store.getActions();\n    (0, _chai.expect)(executedActions[0].type).to.equal(_leavesActions.constants.LEAVE_FETCHING);\n    (0, _chai.expect)(executedActions[1].type).to.equal(_leavesActions.constants.LEAVES_FETCHED);\n    (0, _chai.expect)(executedActions[1].leaves).to.deep.equal([leaveFormStub]);\n    done();\n}).catch(done);",
      "err": {},
      "isRoot": false,
      "uuid": "62228380-eaed-4e0f-a077-ba8d53a2172b",
      "parentUUID": "41b50159-741b-42ec-87a3-2631e499b656",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should dispatch correct action when fetchLeaves is called and returned error",
      "fullTitle": "Leaves Action should dispatch correct action when fetchLeaves is called and returned error",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var error = { error: 'error' };\nvar request = api.get('/leaves').reply(500, error);\nstore.dispatch(_leavesActions.leavesActions.fetchLeaves(1234)).then(function (resp) {\n    request.done();\n    var executedActions = store.getActions();\n    (0, _chai.expect)(executedActions[0].type).to.equal(_leavesActions.constants.LEAVE_FETCHING);\n    (0, _chai.expect)(executedActions[1].type).to.equal(_leavesActions.constants.LEAVE_ERROR);\n    (0, _chai.expect)(executedActions[1].error).to.deep.equal('Unable to retrieve the leaves: 500 (Internal Server Error)');\n    done();\n}).catch(done);",
      "err": {},
      "isRoot": false,
      "uuid": "df493a66-a10d-49f3-bb12-fdf7cba699d1",
      "parentUUID": "41b50159-741b-42ec-87a3-2631e499b656",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should dispatch correct action when submitLeave is called",
      "fullTitle": "Leaves Action should dispatch correct action when submitLeave is called",
      "timedOut": false,
      "duration": 2,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var request = api.post('/leaves/').reply(201, leaveFormStub);\nstore.dispatch(_leavesActions.leavesActions.submitLeave(leaveFormStub)).then(function (resp) {\n    request.done();\n    var executedActions = store.getActions();\n    (0, _chai.expect)(executedActions[0].type).to.equal(_leavesActions.constants.LEAVE_FETCHED);\n    (0, _chai.expect)(executedActions[0].resp).to.deep.equal(leaveFormStub);\n    (0, _chai.expect)(executedActions[1].type).to.equal('@@router/CALL_HISTORY_METHOD');\n    (0, _chai.expect)(executedActions[1].payload).to.deep.equal({ method: 'push', args: ['/'] });\n    done();\n}).catch(done);",
      "err": {},
      "isRoot": false,
      "uuid": "18dc74ca-7ad1-405d-a6ad-413a59ccc386",
      "parentUUID": "41b50159-741b-42ec-87a3-2631e499b656",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should dispatch correct action when submitLeave is called and returned error",
      "fullTitle": "Leaves Action should dispatch correct action when submitLeave is called and returned error",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var error = { error: 'error' };\nvar request = api.post('/leaves/').reply(500, error);\nstore.dispatch(_leavesActions.leavesActions.submitLeave(leaveFormStub)).then(function (resp) {\n    request.done();\n    var executedActions = store.getActions();\n    (0, _chai.expect)(executedActions[0].type).to.equal(_leavesActions.constants.LEAVE_ERROR);\n    (0, _chai.expect)(executedActions[0].error).to.deep.equal('Unable to submit the leave: 500 (Internal Server Error)');\n    done();\n}).catch(done);",
      "err": {},
      "isRoot": false,
      "uuid": "01bac712-f22e-4dcd-bd1e-dec73637110b",
      "parentUUID": "41b50159-741b-42ec-87a3-2631e499b656",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should return the initial state",
      "fullTitle": "Leaves Reducer should return the initial state",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "(0, _chai.expect)((0, _leavesReducer2.default)(undefined, {})).deep.equal({ leaves: [], leave: {} });",
      "err": {},
      "isRoot": false,
      "uuid": "0d30ed9c-5abd-4430-9e97-e2c14481202b",
      "parentUUID": "2da9af6a-b2e4-4e32-a209-e78fc29b946a",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should return a new state with status LOADING when a LEAVE_FETCHING action is received",
      "fullTitle": "Leaves Reducer should return a new state with status LOADING when a LEAVE_FETCHING action is received",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var action = { type: _leavesActions.constants.LEAVE_FETCHING };\nvar updatedState = (0, _leavesReducer2.default)(undefined, action);\n(0, _chai.expect)(updatedState.status).to.equal(\"LOADING\");",
      "err": {},
      "isRoot": false,
      "uuid": "dbae2a19-efd8-49a8-9357-48d0128f2e8c",
      "parentUUID": "2da9af6a-b2e4-4e32-a209-e78fc29b946a",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should return a new state with status LOADING when a LEAVE_FETCHED action is received",
      "fullTitle": "Leaves Reducer should return a new state with status LOADING when a LEAVE_FETCHED action is received",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var leave = { dummy: 'dummy' };\nvar action = { type: _leavesActions.constants.LEAVE_FETCHED, leave: leave };\nvar updatedState = (0, _leavesReducer2.default)(undefined, action);\n(0, _chai.expect)(updatedState.leave).deep.equal(leave);",
      "err": {},
      "isRoot": false,
      "uuid": "e1381cd1-8c4b-47c2-9489-026fc4eaa7e9",
      "parentUUID": "2da9af6a-b2e4-4e32-a209-e78fc29b946a",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should return a new state with status LOADING when a LEAVES_FETCHED action is received",
      "fullTitle": "Leaves Reducer should return a new state with status LOADING when a LEAVES_FETCHED action is received",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var leave = { dummy: 'dummy' };\nvar action = { type: _leavesActions.constants.LEAVES_FETCHED, leaves: [leave] };\nvar updatedState = (0, _leavesReducer2.default)(undefined, action);\n(0, _chai.expect)(updatedState.leaves).deep.equal([leave]);",
      "err": {},
      "isRoot": false,
      "uuid": "475e19d8-6204-4d9f-8a0a-4b943f1d15b9",
      "parentUUID": "2da9af6a-b2e4-4e32-a209-e78fc29b946a",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should return a new state with status LOADING when a LEAVE_ERROR action is received",
      "fullTitle": "Leaves Reducer should return a new state with status LOADING when a LEAVE_ERROR action is received",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var error = { error: 'dummy' };\nvar action = { type: _leavesActions.constants.LEAVE_ERROR, error: error };\nvar updatedState = (0, _leavesReducer2.default)(undefined, action);\n(0, _chai.expect)(updatedState.error).deep.equal(error);",
      "err": {},
      "isRoot": false,
      "uuid": "7ab83adc-322c-44e2-8863-0d66d5fd2d14",
      "parentUUID": "2da9af6a-b2e4-4e32-a209-e78fc29b946a",
      "isHook": false,
      "skipped": false
    }
  ],
  "allPending": [],
  "allPasses": [
    {
      "title": "should have the correct form name",
      "fullTitle": "Render should have the correct form name",
      "timedOut": false,
      "duration": 3,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var title = wrapper.find('h2');\n(0, _chai.expect)(title.text()).equal(\"Leave Management System\");",
      "err": {},
      "isRoot": false,
      "uuid": "cb8c23e3-4ddc-46d0-9447-26c80194fdff",
      "parentUUID": "5c9bcd2b-4b98-486c-b053-cecf572b6b85",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should render fromDate",
      "fullTitle": "Render should render fromDate",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var fromDate = wrapper.find('#fromDate');\n(0, _chai.expect)(fromDate.type()).equal(_fieldGroup2.default);\n(0, _chai.expect)(fromDate.prop('type')).equal('date');\n(0, _chai.expect)(fromDate.prop('label')).equal('From');",
      "err": {},
      "isRoot": false,
      "uuid": "266690b4-049b-4d40-be40-79513d40e568",
      "parentUUID": "5c9bcd2b-4b98-486c-b053-cecf572b6b85",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should render toDate",
      "fullTitle": "Render should render toDate",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var toDate = wrapper.find('#toDate');\n(0, _chai.expect)(toDate.type()).equal(_fieldGroup2.default);\n(0, _chai.expect)(toDate.prop('type')).equal('date');\n(0, _chai.expect)(toDate.prop('label')).equal('To');",
      "err": {},
      "isRoot": false,
      "uuid": "1e03dc4a-0c2f-4cec-96c2-c3bc4f014b31",
      "parentUUID": "5c9bcd2b-4b98-486c-b053-cecf572b6b85",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should render reason",
      "fullTitle": "Render should render reason",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var reason = wrapper.find('#reason');\n(0, _chai.expect)(reason.type()).equal(_fieldGroup2.default);\n(0, _chai.expect)(reason.prop('type')).equal('text');\n(0, _chai.expect)(reason.prop('label')).equal('Reason');",
      "err": {},
      "isRoot": false,
      "uuid": "594783dc-c6a7-4afb-a63c-e8f31139a71d",
      "parentUUID": "5c9bcd2b-4b98-486c-b053-cecf572b6b85",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should render leaveType",
      "fullTitle": "Render should render leaveType",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var leaveType = wrapper.find('FormGroup');\n(0, _chai.expect)(leaveType.find('ControlLabel').prop('children')).equal('Leave Type');\nvar options = leaveType.find('FormControl');\n(0, _chai.expect)(options.childAt(0).prop('children')).equal('Paid Leaves');\n(0, _chai.expect)(options.childAt(1).prop('children')).equal('Leave Without Pay');\n(0, _chai.expect)(options.childAt(2).prop('children')).equal('Compensation Off');",
      "err": {},
      "isRoot": false,
      "uuid": "8937cd23-031d-45e9-8651-dd70845492dd",
      "parentUUID": "5c9bcd2b-4b98-486c-b053-cecf572b6b85",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should render Submit Button",
      "fullTitle": "Render should render Submit Button",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var submitBtn = wrapper.find('#submitBtn');\n(0, _chai.expect)(submitBtn.type()).equal(_reactBootstrap.Button);\n(0, _chai.expect)(submitBtn.prop('children')).equal('Submit');",
      "err": {},
      "isRoot": false,
      "uuid": "c0bc93ce-c723-490f-ab4c-3b3cb7d89287",
      "parentUUID": "5c9bcd2b-4b98-486c-b053-cecf572b6b85",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should update fromDate when it is changed",
      "fullTitle": "Event Handlers should update fromDate when it is changed",
      "timedOut": false,
      "duration": 4,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var fromDate = wrapper.find('#fromDate');\nfromDate.simulate('change', { target: { value: '2018-04-01' } });\n(0, _chai.expect)(wrapper.state().fromDate.toString()).equal('Sun Apr 01 2018 02:00:00 GMT+0200 (CEST)');",
      "err": {},
      "isRoot": false,
      "uuid": "86474f15-52d1-40da-b7bd-3238cdffee57",
      "parentUUID": "3073c367-1fe1-4492-a516-44d100c5e91e",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should update toDate when it is changed",
      "fullTitle": "Event Handlers should update toDate when it is changed",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var toDate = wrapper.find('#toDate');\ntoDate.simulate('change', { target: { value: '2018-04-03' } });\n(0, _chai.expect)(wrapper.state().toDate.toString()).equal('Tue Apr 03 2018 02:00:00 GMT+0200 (CEST)');",
      "err": {},
      "isRoot": false,
      "uuid": "2a2d26b4-d578-42e8-8f3d-b7870d7c874e",
      "parentUUID": "3073c367-1fe1-4492-a516-44d100c5e91e",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should update reason when it is changed",
      "fullTitle": "Event Handlers should update reason when it is changed",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var reason = wrapper.find('#reason');\nreason.simulate('change', { target: { value: 'Vacations' } });\n(0, _chai.expect)(wrapper.state().reason.toString()).equal('Vacations');",
      "err": {},
      "isRoot": false,
      "uuid": "07a619c9-54ac-4d37-bc0b-e61511492842",
      "parentUUID": "3073c367-1fe1-4492-a516-44d100c5e91e",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should update leave type when it is changed",
      "fullTitle": "Event Handlers should update leave type when it is changed",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var leaveType = wrapper.find('FormControl');\nleaveType.simulate('change', { target: { value: 'LOP' } });\n(0, _chai.expect)(wrapper.state().type.toString()).equal('LOP');",
      "err": {},
      "isRoot": false,
      "uuid": "7ae384a8-781c-4458-961f-81948bcecb59",
      "parentUUID": "3073c367-1fe1-4492-a516-44d100c5e91e",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should submit leave when clicked on Submit",
      "fullTitle": "Event Handlers should submit leave when clicked on Submit",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var submitBtn = wrapper.find('#submitBtn');\nsubmitBtn.simulate('click', { preventDefault: function preventDefault() {} });\n(0, _chai.expect)(submitLeaveStub.called).equal(true);",
      "err": {},
      "isRoot": false,
      "uuid": "5eb13422-6ae2-4d87-9500-d73b085f6a30",
      "parentUUID": "3073c367-1fe1-4492-a516-44d100c5e91e",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should dispatch an action to fetch a leave",
      "fullTitle": "Leave Form Container should dispatch an action to fetch a leave",
      "timedOut": false,
      "duration": 9,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var shallowWrapper = wrapper.dive({ context: { store: store } });\nshallowWrapper.prop('fetchLeave')();\nvar executedAction = store.getActions()[0];\n(0, _chai.expect)(executedAction.type).equal('LEAVE_FETCHING');\n(0, _chai.expect)(executedAction.leaveId).equal(1234);",
      "err": {},
      "isRoot": false,
      "uuid": "118b6176-e7a6-42d5-9f13-2cf9f78f5163",
      "parentUUID": "d60723f4-4992-4373-9c26-055740a1b71e",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should dispatch correct action when fetchLeave is called",
      "fullTitle": "Leaves Action should dispatch correct action when fetchLeave is called",
      "timedOut": false,
      "duration": 17,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var request = api.get('/leaves/1234').reply(200, leaveFormStub);\nstore.dispatch(_leavesActions.leavesActions.fetchLeave(1234)).then(function (resp) {\n    request.done();\n    var executedActions = store.getActions();\n    (0, _chai.expect)(executedActions[0].type).to.equal(_leavesActions.constants.LEAVE_FETCHING);\n    (0, _chai.expect)(executedActions[1].type).to.equal(_leavesActions.constants.LEAVE_FETCHED);\n    (0, _chai.expect)(executedActions[1].leave).to.deep.equal(leaveFormStub);\n    done();\n}).catch(done);",
      "err": {},
      "isRoot": false,
      "uuid": "93b417b1-a6ad-4cbb-9dec-5268494b2c83",
      "parentUUID": "41b50159-741b-42ec-87a3-2631e499b656",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should dispatch correct action when fetchLeave is called and returned error",
      "fullTitle": "Leaves Action should dispatch correct action when fetchLeave is called and returned error",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var error = { error: 'error' };\nvar request = api.get('/leaves/1234').reply(500, error);\nstore.dispatch(_leavesActions.leavesActions.fetchLeave(1234)).then(function (resp) {\n    request.done();\n    var executedActions = store.getActions();\n    (0, _chai.expect)(executedActions[0].type).to.equal(_leavesActions.constants.LEAVE_FETCHING);\n    (0, _chai.expect)(executedActions[1].type).to.equal(_leavesActions.constants.LEAVE_ERROR);\n    (0, _chai.expect)(executedActions[1].error).to.deep.equal('Unable to retrieve the leave with id 1234: 500 (Internal Server Error)');\n    done();\n}).catch(done);",
      "err": {},
      "isRoot": false,
      "uuid": "1975c757-ee4f-4df0-9016-978d096f39ae",
      "parentUUID": "41b50159-741b-42ec-87a3-2631e499b656",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should dispatch correct action when fetchLeaves is called",
      "fullTitle": "Leaves Action should dispatch correct action when fetchLeaves is called",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var request = api.get('/leaves').reply(200, [leaveFormStub]);\nstore.dispatch(_leavesActions.leavesActions.fetchLeaves(1234)).then(function (resp) {\n    request.done();\n    var executedActions = store.getActions();\n    (0, _chai.expect)(executedActions[0].type).to.equal(_leavesActions.constants.LEAVE_FETCHING);\n    (0, _chai.expect)(executedActions[1].type).to.equal(_leavesActions.constants.LEAVES_FETCHED);\n    (0, _chai.expect)(executedActions[1].leaves).to.deep.equal([leaveFormStub]);\n    done();\n}).catch(done);",
      "err": {},
      "isRoot": false,
      "uuid": "62228380-eaed-4e0f-a077-ba8d53a2172b",
      "parentUUID": "41b50159-741b-42ec-87a3-2631e499b656",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should dispatch correct action when fetchLeaves is called and returned error",
      "fullTitle": "Leaves Action should dispatch correct action when fetchLeaves is called and returned error",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var error = { error: 'error' };\nvar request = api.get('/leaves').reply(500, error);\nstore.dispatch(_leavesActions.leavesActions.fetchLeaves(1234)).then(function (resp) {\n    request.done();\n    var executedActions = store.getActions();\n    (0, _chai.expect)(executedActions[0].type).to.equal(_leavesActions.constants.LEAVE_FETCHING);\n    (0, _chai.expect)(executedActions[1].type).to.equal(_leavesActions.constants.LEAVE_ERROR);\n    (0, _chai.expect)(executedActions[1].error).to.deep.equal('Unable to retrieve the leaves: 500 (Internal Server Error)');\n    done();\n}).catch(done);",
      "err": {},
      "isRoot": false,
      "uuid": "df493a66-a10d-49f3-bb12-fdf7cba699d1",
      "parentUUID": "41b50159-741b-42ec-87a3-2631e499b656",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should dispatch correct action when submitLeave is called",
      "fullTitle": "Leaves Action should dispatch correct action when submitLeave is called",
      "timedOut": false,
      "duration": 2,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var request = api.post('/leaves/').reply(201, leaveFormStub);\nstore.dispatch(_leavesActions.leavesActions.submitLeave(leaveFormStub)).then(function (resp) {\n    request.done();\n    var executedActions = store.getActions();\n    (0, _chai.expect)(executedActions[0].type).to.equal(_leavesActions.constants.LEAVE_FETCHED);\n    (0, _chai.expect)(executedActions[0].resp).to.deep.equal(leaveFormStub);\n    (0, _chai.expect)(executedActions[1].type).to.equal('@@router/CALL_HISTORY_METHOD');\n    (0, _chai.expect)(executedActions[1].payload).to.deep.equal({ method: 'push', args: ['/'] });\n    done();\n}).catch(done);",
      "err": {},
      "isRoot": false,
      "uuid": "18dc74ca-7ad1-405d-a6ad-413a59ccc386",
      "parentUUID": "41b50159-741b-42ec-87a3-2631e499b656",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should dispatch correct action when submitLeave is called and returned error",
      "fullTitle": "Leaves Action should dispatch correct action when submitLeave is called and returned error",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var error = { error: 'error' };\nvar request = api.post('/leaves/').reply(500, error);\nstore.dispatch(_leavesActions.leavesActions.submitLeave(leaveFormStub)).then(function (resp) {\n    request.done();\n    var executedActions = store.getActions();\n    (0, _chai.expect)(executedActions[0].type).to.equal(_leavesActions.constants.LEAVE_ERROR);\n    (0, _chai.expect)(executedActions[0].error).to.deep.equal('Unable to submit the leave: 500 (Internal Server Error)');\n    done();\n}).catch(done);",
      "err": {},
      "isRoot": false,
      "uuid": "01bac712-f22e-4dcd-bd1e-dec73637110b",
      "parentUUID": "41b50159-741b-42ec-87a3-2631e499b656",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should return the initial state",
      "fullTitle": "Leaves Reducer should return the initial state",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "(0, _chai.expect)((0, _leavesReducer2.default)(undefined, {})).deep.equal({ leaves: [], leave: {} });",
      "err": {},
      "isRoot": false,
      "uuid": "0d30ed9c-5abd-4430-9e97-e2c14481202b",
      "parentUUID": "2da9af6a-b2e4-4e32-a209-e78fc29b946a",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should return a new state with status LOADING when a LEAVE_FETCHING action is received",
      "fullTitle": "Leaves Reducer should return a new state with status LOADING when a LEAVE_FETCHING action is received",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var action = { type: _leavesActions.constants.LEAVE_FETCHING };\nvar updatedState = (0, _leavesReducer2.default)(undefined, action);\n(0, _chai.expect)(updatedState.status).to.equal(\"LOADING\");",
      "err": {},
      "isRoot": false,
      "uuid": "dbae2a19-efd8-49a8-9357-48d0128f2e8c",
      "parentUUID": "2da9af6a-b2e4-4e32-a209-e78fc29b946a",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should return a new state with status LOADING when a LEAVE_FETCHED action is received",
      "fullTitle": "Leaves Reducer should return a new state with status LOADING when a LEAVE_FETCHED action is received",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var leave = { dummy: 'dummy' };\nvar action = { type: _leavesActions.constants.LEAVE_FETCHED, leave: leave };\nvar updatedState = (0, _leavesReducer2.default)(undefined, action);\n(0, _chai.expect)(updatedState.leave).deep.equal(leave);",
      "err": {},
      "isRoot": false,
      "uuid": "e1381cd1-8c4b-47c2-9489-026fc4eaa7e9",
      "parentUUID": "2da9af6a-b2e4-4e32-a209-e78fc29b946a",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should return a new state with status LOADING when a LEAVES_FETCHED action is received",
      "fullTitle": "Leaves Reducer should return a new state with status LOADING when a LEAVES_FETCHED action is received",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var leave = { dummy: 'dummy' };\nvar action = { type: _leavesActions.constants.LEAVES_FETCHED, leaves: [leave] };\nvar updatedState = (0, _leavesReducer2.default)(undefined, action);\n(0, _chai.expect)(updatedState.leaves).deep.equal([leave]);",
      "err": {},
      "isRoot": false,
      "uuid": "475e19d8-6204-4d9f-8a0a-4b943f1d15b9",
      "parentUUID": "2da9af6a-b2e4-4e32-a209-e78fc29b946a",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should return a new state with status LOADING when a LEAVE_ERROR action is received",
      "fullTitle": "Leaves Reducer should return a new state with status LOADING when a LEAVE_ERROR action is received",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var error = { error: 'dummy' };\nvar action = { type: _leavesActions.constants.LEAVE_ERROR, error: error };\nvar updatedState = (0, _leavesReducer2.default)(undefined, action);\n(0, _chai.expect)(updatedState.error).deep.equal(error);",
      "err": {},
      "isRoot": false,
      "uuid": "7ab83adc-322c-44e2-8863-0d66d5fd2d14",
      "parentUUID": "2da9af6a-b2e4-4e32-a209-e78fc29b946a",
      "isHook": false,
      "skipped": false
    }
  ],
  "allFailures": [],
  "copyrightYear": 2018
}