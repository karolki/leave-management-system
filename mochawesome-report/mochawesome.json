{
  "stats": {
    "suites": 10,
    "tests": 23,
    "passes": 23,
    "pending": 0,
    "failures": 0,
    "start": "2018-04-06T10:42:02.257Z",
    "end": "2018-04-06T10:42:02.328Z",
    "duration": 71,
    "testsRegistered": 23,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false,
    "passPercentClass": "success",
    "pendingPercentClass": "danger"
  },
  "suites": {
    "title": "",
    "suites": [
      {
        "title": "Dashboard",
        "suites": [
          {
            "title": "Render",
            "suites": [],
            "tests": [
              {
                "title": "should render NewLeave button",
                "fullTitle": "Dashboard Render should render NewLeave button",
                "timedOut": false,
                "duration": 3,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var newLeaveBtn = wrapper.find('Button');\n(0, _chai.expect)(newLeaveBtn.type()).equal(_reactBootstrap.Button);\n(0, _chai.expect)(newLeaveBtn.prop('children')).equal('New Leave');",
                "err": {},
                "isRoot": false,
                "uuid": "3662e226-25e4-432c-a1eb-97ff981acc7f",
                "parentUUID": "96d7d63e-28fb-49c9-9ff9-d35ce0d4a017",
                "isHook": false,
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/test/leaves/components/dashboardSpec.js",
            "uuid": "96d7d63e-28fb-49c9-9ff9-d35ce0d4a017",
            "beforeHooks": [],
            "afterHooks": [],
            "fullFile": "/Users/kunalhire/workspace/leave-management-system/test/leaves/components/dashboardSpec.js",
            "passes": [
              {
                "title": "should render NewLeave button",
                "fullTitle": "Dashboard Render should render NewLeave button",
                "timedOut": false,
                "duration": 3,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var newLeaveBtn = wrapper.find('Button');\n(0, _chai.expect)(newLeaveBtn.type()).equal(_reactBootstrap.Button);\n(0, _chai.expect)(newLeaveBtn.prop('children')).equal('New Leave');",
                "err": {},
                "isRoot": false,
                "uuid": "3662e226-25e4-432c-a1eb-97ff981acc7f",
                "parentUUID": "96d7d63e-28fb-49c9-9ff9-d35ce0d4a017",
                "isHook": false,
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasBeforeHooks": false,
            "hasAfterHooks": false,
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 1,
            "totalPasses": 1,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 3,
            "rootEmpty": false
          },
          {
            "title": "Event Handlers",
            "suites": [],
            "tests": [
              {
                "title": "should navigate to new leave page when clicked on New Leave button",
                "fullTitle": "Dashboard Event Handlers should navigate to new leave page when clicked on New Leave button",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var newLeaveBtn = wrapper.find('Button');\nnewLeaveBtn.simulate('click', { preventDefault: function preventDefault() {} });\n(0, _chai.expect)(navigateToNewLeaveStub.called).equal(true);",
                "err": {},
                "isRoot": false,
                "uuid": "76650b8b-b36a-4c0e-ae45-3412f44fd4fd",
                "parentUUID": "f751c834-cb86-4781-8fa4-e5dc4af31484",
                "isHook": false,
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/test/leaves/components/dashboardSpec.js",
            "uuid": "f751c834-cb86-4781-8fa4-e5dc4af31484",
            "beforeHooks": [],
            "afterHooks": [],
            "fullFile": "/Users/kunalhire/workspace/leave-management-system/test/leaves/components/dashboardSpec.js",
            "passes": [
              {
                "title": "should navigate to new leave page when clicked on New Leave button",
                "fullTitle": "Dashboard Event Handlers should navigate to new leave page when clicked on New Leave button",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var newLeaveBtn = wrapper.find('Button');\nnewLeaveBtn.simulate('click', { preventDefault: function preventDefault() {} });\n(0, _chai.expect)(navigateToNewLeaveStub.called).equal(true);",
                "err": {},
                "isRoot": false,
                "uuid": "76650b8b-b36a-4c0e-ae45-3412f44fd4fd",
                "parentUUID": "f751c834-cb86-4781-8fa4-e5dc4af31484",
                "isHook": false,
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasBeforeHooks": false,
            "hasAfterHooks": false,
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 1,
            "totalPasses": 1,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 1,
            "rootEmpty": false
          }
        ],
        "tests": [],
        "pending": [],
        "root": false,
        "_timeout": 2000,
        "file": "/test/leaves/components/dashboardSpec.js",
        "uuid": "d2302552-7e05-457f-b306-8e4f720c99a4",
        "beforeHooks": [
          {
            "title": "\"before each\" hook",
            "fullTitle": "Dashboard \"before each\" hook",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "wrapper = (0, _enzyme.shallow)(_react2.default.createElement(_dashboard2.default, { navigateToNewLeave: navigateToNewLeaveStub }));",
            "err": {},
            "isRoot": false,
            "uuid": "0be41ff7-2d6b-42f8-b7d6-75c7825c5c8b",
            "parentUUID": "d2302552-7e05-457f-b306-8e4f720c99a4",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [],
        "fullFile": "/Users/kunalhire/workspace/leave-management-system/test/leaves/components/dashboardSpec.js",
        "passes": [],
        "failures": [],
        "skipped": [],
        "hasBeforeHooks": true,
        "hasAfterHooks": false,
        "hasTests": false,
        "hasSuites": true,
        "totalTests": 0,
        "totalPasses": 0,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": false,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 0,
        "rootEmpty": false
      },
      {
        "title": "Leave Form Component",
        "suites": [
          {
            "title": "Render",
            "suites": [],
            "tests": [
              {
                "title": "should have the correct form name",
                "fullTitle": "Leave Form Component Render should have the correct form name",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var title = wrapper.find('h2');\n(0, _chai.expect)(title.text()).equal(\"Leave Management System\");",
                "err": {},
                "isRoot": false,
                "uuid": "de9f2aa1-4878-4d9a-94bf-5600df46fca4",
                "parentUUID": "ef8d2ced-2b07-47b6-a6d3-b58abe902fc5",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should render fromDate",
                "fullTitle": "Leave Form Component Render should render fromDate",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var fromDate = wrapper.find('#fromDate');\n(0, _chai.expect)(fromDate.type()).equal(_fieldGroup2.default);\n(0, _chai.expect)(fromDate.prop('type')).equal('date');\n(0, _chai.expect)(fromDate.prop('label')).equal('From');",
                "err": {},
                "isRoot": false,
                "uuid": "43176495-b1c2-49a5-b9cf-8485dd4b5ab3",
                "parentUUID": "ef8d2ced-2b07-47b6-a6d3-b58abe902fc5",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should render toDate",
                "fullTitle": "Leave Form Component Render should render toDate",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var toDate = wrapper.find('#toDate');\n(0, _chai.expect)(toDate.type()).equal(_fieldGroup2.default);\n(0, _chai.expect)(toDate.prop('type')).equal('date');\n(0, _chai.expect)(toDate.prop('label')).equal('To');",
                "err": {},
                "isRoot": false,
                "uuid": "9e49c4fd-bb8f-4bb0-9895-242df200879f",
                "parentUUID": "ef8d2ced-2b07-47b6-a6d3-b58abe902fc5",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should render reason",
                "fullTitle": "Leave Form Component Render should render reason",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var reason = wrapper.find('#reason');\n(0, _chai.expect)(reason.type()).equal(_fieldGroup2.default);\n(0, _chai.expect)(reason.prop('type')).equal('text');\n(0, _chai.expect)(reason.prop('label')).equal('Reason');",
                "err": {},
                "isRoot": false,
                "uuid": "5d9ffe79-8856-47ce-a5c5-124419d63a4c",
                "parentUUID": "ef8d2ced-2b07-47b6-a6d3-b58abe902fc5",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should render leaveType",
                "fullTitle": "Leave Form Component Render should render leaveType",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var leaveType = wrapper.find('FormGroup');\n(0, _chai.expect)(leaveType.find('ControlLabel').prop('children')).equal('Leave Type');\nvar options = leaveType.find('FormControl');\n(0, _chai.expect)(options.childAt(0).prop('children')).equal('Paid Leaves');\n(0, _chai.expect)(options.childAt(1).prop('children')).equal('Leave Without Pay');\n(0, _chai.expect)(options.childAt(2).prop('children')).equal('Compensation Off');",
                "err": {},
                "isRoot": false,
                "uuid": "933f079c-7bd9-4b02-adcf-4f908f235fcf",
                "parentUUID": "ef8d2ced-2b07-47b6-a6d3-b58abe902fc5",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should render Submit Button",
                "fullTitle": "Leave Form Component Render should render Submit Button",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var submitBtn = wrapper.find('#submitBtn');\n(0, _chai.expect)(submitBtn.type()).equal(_reactBootstrap.Button);\n(0, _chai.expect)(submitBtn.prop('children')).equal('Submit');",
                "err": {},
                "isRoot": false,
                "uuid": "937450b0-5f2f-430a-bf5f-32ad78ecb023",
                "parentUUID": "ef8d2ced-2b07-47b6-a6d3-b58abe902fc5",
                "isHook": false,
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/test/leaves/components/leaveFormSpec.js",
            "uuid": "ef8d2ced-2b07-47b6-a6d3-b58abe902fc5",
            "beforeHooks": [],
            "afterHooks": [],
            "fullFile": "/Users/kunalhire/workspace/leave-management-system/test/leaves/components/leaveFormSpec.js",
            "passes": [
              {
                "title": "should have the correct form name",
                "fullTitle": "Leave Form Component Render should have the correct form name",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var title = wrapper.find('h2');\n(0, _chai.expect)(title.text()).equal(\"Leave Management System\");",
                "err": {},
                "isRoot": false,
                "uuid": "de9f2aa1-4878-4d9a-94bf-5600df46fca4",
                "parentUUID": "ef8d2ced-2b07-47b6-a6d3-b58abe902fc5",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should render fromDate",
                "fullTitle": "Leave Form Component Render should render fromDate",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var fromDate = wrapper.find('#fromDate');\n(0, _chai.expect)(fromDate.type()).equal(_fieldGroup2.default);\n(0, _chai.expect)(fromDate.prop('type')).equal('date');\n(0, _chai.expect)(fromDate.prop('label')).equal('From');",
                "err": {},
                "isRoot": false,
                "uuid": "43176495-b1c2-49a5-b9cf-8485dd4b5ab3",
                "parentUUID": "ef8d2ced-2b07-47b6-a6d3-b58abe902fc5",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should render toDate",
                "fullTitle": "Leave Form Component Render should render toDate",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var toDate = wrapper.find('#toDate');\n(0, _chai.expect)(toDate.type()).equal(_fieldGroup2.default);\n(0, _chai.expect)(toDate.prop('type')).equal('date');\n(0, _chai.expect)(toDate.prop('label')).equal('To');",
                "err": {},
                "isRoot": false,
                "uuid": "9e49c4fd-bb8f-4bb0-9895-242df200879f",
                "parentUUID": "ef8d2ced-2b07-47b6-a6d3-b58abe902fc5",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should render reason",
                "fullTitle": "Leave Form Component Render should render reason",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var reason = wrapper.find('#reason');\n(0, _chai.expect)(reason.type()).equal(_fieldGroup2.default);\n(0, _chai.expect)(reason.prop('type')).equal('text');\n(0, _chai.expect)(reason.prop('label')).equal('Reason');",
                "err": {},
                "isRoot": false,
                "uuid": "5d9ffe79-8856-47ce-a5c5-124419d63a4c",
                "parentUUID": "ef8d2ced-2b07-47b6-a6d3-b58abe902fc5",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should render leaveType",
                "fullTitle": "Leave Form Component Render should render leaveType",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var leaveType = wrapper.find('FormGroup');\n(0, _chai.expect)(leaveType.find('ControlLabel').prop('children')).equal('Leave Type');\nvar options = leaveType.find('FormControl');\n(0, _chai.expect)(options.childAt(0).prop('children')).equal('Paid Leaves');\n(0, _chai.expect)(options.childAt(1).prop('children')).equal('Leave Without Pay');\n(0, _chai.expect)(options.childAt(2).prop('children')).equal('Compensation Off');",
                "err": {},
                "isRoot": false,
                "uuid": "933f079c-7bd9-4b02-adcf-4f908f235fcf",
                "parentUUID": "ef8d2ced-2b07-47b6-a6d3-b58abe902fc5",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should render Submit Button",
                "fullTitle": "Leave Form Component Render should render Submit Button",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var submitBtn = wrapper.find('#submitBtn');\n(0, _chai.expect)(submitBtn.type()).equal(_reactBootstrap.Button);\n(0, _chai.expect)(submitBtn.prop('children')).equal('Submit');",
                "err": {},
                "isRoot": false,
                "uuid": "937450b0-5f2f-430a-bf5f-32ad78ecb023",
                "parentUUID": "ef8d2ced-2b07-47b6-a6d3-b58abe902fc5",
                "isHook": false,
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasBeforeHooks": false,
            "hasAfterHooks": false,
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 6,
            "totalPasses": 6,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 2,
            "rootEmpty": false
          },
          {
            "title": "Event Handlers",
            "suites": [],
            "tests": [
              {
                "title": "should update fromDate when it is changed",
                "fullTitle": "Leave Form Component Event Handlers should update fromDate when it is changed",
                "timedOut": false,
                "duration": 4,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var fromDate = wrapper.find('#fromDate');\nfromDate.simulate('change', { target: { value: '2018-04-01' } });\n(0, _chai.expect)(wrapper.state().fromDate.toString()).equal('Sun Apr 01 2018 02:00:00 GMT+0200 (CEST)');",
                "err": {},
                "isRoot": false,
                "uuid": "5da02cea-1ab0-4889-a8ff-842dd40bccca",
                "parentUUID": "1036084d-b50f-48e7-8095-025b1e8b16a5",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should update toDate when it is changed",
                "fullTitle": "Leave Form Component Event Handlers should update toDate when it is changed",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var toDate = wrapper.find('#toDate');\ntoDate.simulate('change', { target: { value: '2018-04-03' } });\n(0, _chai.expect)(wrapper.state().toDate.toString()).equal('Tue Apr 03 2018 02:00:00 GMT+0200 (CEST)');",
                "err": {},
                "isRoot": false,
                "uuid": "c4e041a8-5e18-4440-9e9f-61ce65d58422",
                "parentUUID": "1036084d-b50f-48e7-8095-025b1e8b16a5",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should update reason when it is changed",
                "fullTitle": "Leave Form Component Event Handlers should update reason when it is changed",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var reason = wrapper.find('#reason');\nreason.simulate('change', { target: { value: 'Vacations' } });\n(0, _chai.expect)(wrapper.state().reason.toString()).equal('Vacations');",
                "err": {},
                "isRoot": false,
                "uuid": "9205116b-8b54-4bf8-8ea8-ff46db43836a",
                "parentUUID": "1036084d-b50f-48e7-8095-025b1e8b16a5",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should update leave type when it is changed",
                "fullTitle": "Leave Form Component Event Handlers should update leave type when it is changed",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var leaveType = wrapper.find('FormControl');\nleaveType.simulate('change', { target: { value: 'LOP' } });\n(0, _chai.expect)(wrapper.state().type.toString()).equal('LOP');",
                "err": {},
                "isRoot": false,
                "uuid": "38090359-27c9-4508-a626-ad40f52f97a6",
                "parentUUID": "1036084d-b50f-48e7-8095-025b1e8b16a5",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should submit leave when clicked on Submit",
                "fullTitle": "Leave Form Component Event Handlers should submit leave when clicked on Submit",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var submitBtn = wrapper.find('#submitBtn');\nsubmitBtn.simulate('click', { preventDefault: function preventDefault() {} });\n(0, _chai.expect)(submitLeaveStub.called).equal(true);",
                "err": {},
                "isRoot": false,
                "uuid": "32b73d7d-8510-4e68-87a2-2e558f83adc6",
                "parentUUID": "1036084d-b50f-48e7-8095-025b1e8b16a5",
                "isHook": false,
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/test/leaves/components/leaveFormSpec.js",
            "uuid": "1036084d-b50f-48e7-8095-025b1e8b16a5",
            "beforeHooks": [],
            "afterHooks": [],
            "fullFile": "/Users/kunalhire/workspace/leave-management-system/test/leaves/components/leaveFormSpec.js",
            "passes": [
              {
                "title": "should update fromDate when it is changed",
                "fullTitle": "Leave Form Component Event Handlers should update fromDate when it is changed",
                "timedOut": false,
                "duration": 4,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var fromDate = wrapper.find('#fromDate');\nfromDate.simulate('change', { target: { value: '2018-04-01' } });\n(0, _chai.expect)(wrapper.state().fromDate.toString()).equal('Sun Apr 01 2018 02:00:00 GMT+0200 (CEST)');",
                "err": {},
                "isRoot": false,
                "uuid": "5da02cea-1ab0-4889-a8ff-842dd40bccca",
                "parentUUID": "1036084d-b50f-48e7-8095-025b1e8b16a5",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should update toDate when it is changed",
                "fullTitle": "Leave Form Component Event Handlers should update toDate when it is changed",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var toDate = wrapper.find('#toDate');\ntoDate.simulate('change', { target: { value: '2018-04-03' } });\n(0, _chai.expect)(wrapper.state().toDate.toString()).equal('Tue Apr 03 2018 02:00:00 GMT+0200 (CEST)');",
                "err": {},
                "isRoot": false,
                "uuid": "c4e041a8-5e18-4440-9e9f-61ce65d58422",
                "parentUUID": "1036084d-b50f-48e7-8095-025b1e8b16a5",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should update reason when it is changed",
                "fullTitle": "Leave Form Component Event Handlers should update reason when it is changed",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var reason = wrapper.find('#reason');\nreason.simulate('change', { target: { value: 'Vacations' } });\n(0, _chai.expect)(wrapper.state().reason.toString()).equal('Vacations');",
                "err": {},
                "isRoot": false,
                "uuid": "9205116b-8b54-4bf8-8ea8-ff46db43836a",
                "parentUUID": "1036084d-b50f-48e7-8095-025b1e8b16a5",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should update leave type when it is changed",
                "fullTitle": "Leave Form Component Event Handlers should update leave type when it is changed",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var leaveType = wrapper.find('FormControl');\nleaveType.simulate('change', { target: { value: 'LOP' } });\n(0, _chai.expect)(wrapper.state().type.toString()).equal('LOP');",
                "err": {},
                "isRoot": false,
                "uuid": "38090359-27c9-4508-a626-ad40f52f97a6",
                "parentUUID": "1036084d-b50f-48e7-8095-025b1e8b16a5",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should submit leave when clicked on Submit",
                "fullTitle": "Leave Form Component Event Handlers should submit leave when clicked on Submit",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var submitBtn = wrapper.find('#submitBtn');\nsubmitBtn.simulate('click', { preventDefault: function preventDefault() {} });\n(0, _chai.expect)(submitLeaveStub.called).equal(true);",
                "err": {},
                "isRoot": false,
                "uuid": "32b73d7d-8510-4e68-87a2-2e558f83adc6",
                "parentUUID": "1036084d-b50f-48e7-8095-025b1e8b16a5",
                "isHook": false,
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasBeforeHooks": false,
            "hasAfterHooks": false,
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 5,
            "totalPasses": 5,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 7,
            "rootEmpty": false
          }
        ],
        "tests": [],
        "pending": [],
        "root": false,
        "_timeout": 2000,
        "file": "/test/leaves/components/leaveFormSpec.js",
        "uuid": "ee52fe93-7b83-42ba-b1cb-91eb896886f8",
        "beforeHooks": [
          {
            "title": "\"before each\" hook",
            "fullTitle": "Leave Form Component \"before each\" hook",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "wrapper = (0, _enzyme.shallow)(_react2.default.createElement(_leaveForm2.default, { fetchLeave: fetchLeaveStub, submitLeave: submitLeaveStub, leaves: [] }));",
            "err": {},
            "isRoot": false,
            "uuid": "0d91832d-6b2c-4e55-a132-c43aade40e8c",
            "parentUUID": "ee52fe93-7b83-42ba-b1cb-91eb896886f8",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [],
        "fullFile": "/Users/kunalhire/workspace/leave-management-system/test/leaves/components/leaveFormSpec.js",
        "passes": [],
        "failures": [],
        "skipped": [],
        "hasBeforeHooks": true,
        "hasAfterHooks": false,
        "hasTests": false,
        "hasSuites": true,
        "totalTests": 0,
        "totalPasses": 0,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": false,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 0,
        "rootEmpty": false
      },
      {
        "title": "Dashboard Container",
        "suites": [],
        "tests": [
          {
            "title": "should dispatch an action to navigate To New Leave",
            "fullTitle": "Dashboard Container should dispatch an action to navigate To New Leave",
            "timedOut": false,
            "duration": 3,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var shallowWrapper = wrapper.dive({ context: { store: store } });\nshallowWrapper.prop('navigateToNewLeave')();\nvar executedAction = store.getActions()[0];\n(0, _chai.expect)(executedAction.type).equal('@@router/CALL_HISTORY_METHOD');\n(0, _chai.expect)(executedAction.payload).deep.equal({ method: 'push', args: ['new'] });",
            "err": {},
            "isRoot": false,
            "uuid": "07c3ea0b-47e1-4308-9d05-a59e446d5f9c",
            "parentUUID": "a0b54174-ae41-40e6-8ef9-10793ea6cb0e",
            "isHook": false,
            "skipped": false
          }
        ],
        "pending": [],
        "root": false,
        "_timeout": 2000,
        "file": "/test/leaves/container/dashboardSpec.js",
        "uuid": "a0b54174-ae41-40e6-8ef9-10793ea6cb0e",
        "beforeHooks": [
          {
            "title": "\"before each\" hook",
            "fullTitle": "Dashboard Container \"before each\" hook",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "wrapper = (0, _enzyme.shallow)(_react2.default.createElement(\n    _reactRedux.Provider,\n    { store: store },\n    _react2.default.createElement(_dashbord2.default, null)\n));",
            "err": {},
            "isRoot": false,
            "uuid": "74dc36d6-fd69-4c81-985f-9dc16d675a73",
            "parentUUID": "a0b54174-ae41-40e6-8ef9-10793ea6cb0e",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [],
        "fullFile": "/Users/kunalhire/workspace/leave-management-system/test/leaves/container/dashboardSpec.js",
        "passes": [
          {
            "title": "should dispatch an action to navigate To New Leave",
            "fullTitle": "Dashboard Container should dispatch an action to navigate To New Leave",
            "timedOut": false,
            "duration": 3,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var shallowWrapper = wrapper.dive({ context: { store: store } });\nshallowWrapper.prop('navigateToNewLeave')();\nvar executedAction = store.getActions()[0];\n(0, _chai.expect)(executedAction.type).equal('@@router/CALL_HISTORY_METHOD');\n(0, _chai.expect)(executedAction.payload).deep.equal({ method: 'push', args: ['new'] });",
            "err": {},
            "isRoot": false,
            "uuid": "07c3ea0b-47e1-4308-9d05-a59e446d5f9c",
            "parentUUID": "a0b54174-ae41-40e6-8ef9-10793ea6cb0e",
            "isHook": false,
            "skipped": false
          }
        ],
        "failures": [],
        "skipped": [],
        "hasBeforeHooks": true,
        "hasAfterHooks": false,
        "hasTests": true,
        "hasSuites": false,
        "totalTests": 1,
        "totalPasses": 1,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": true,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 3,
        "rootEmpty": false
      },
      {
        "title": "Leave Form Container",
        "suites": [],
        "tests": [
          {
            "title": "should dispatch an action to fetch a leave",
            "fullTitle": "Leave Form Container should dispatch an action to fetch a leave",
            "timedOut": false,
            "duration": 8,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var shallowWrapper = wrapper.dive({ context: { store: store } });\nshallowWrapper.prop('fetchLeave')();\nvar executedAction = store.getActions()[0];\n(0, _chai.expect)(executedAction.type).equal('LEAVE_FETCHING');\n(0, _chai.expect)(executedAction.leaveId).equal(1234);",
            "err": {},
            "isRoot": false,
            "uuid": "71109318-369f-49d7-b7bd-2bf3d00802e6",
            "parentUUID": "4a29605f-b129-439d-be73-d5edf86fab93",
            "isHook": false,
            "skipped": false
          }
        ],
        "pending": [],
        "root": false,
        "_timeout": 2000,
        "file": "/test/leaves/container/leaveFormSpec.js",
        "uuid": "4a29605f-b129-439d-be73-d5edf86fab93",
        "beforeHooks": [
          {
            "title": "\"before each\" hook",
            "fullTitle": "Leave Form Container \"before each\" hook",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "wrapper = (0, _enzyme.shallow)(_react2.default.createElement(\n    _reactRedux.Provider,\n    { store: store },\n    _react2.default.createElement(_leaveForm2.default, { params: { leaveId: 1234 } })\n));",
            "err": {},
            "isRoot": false,
            "uuid": "68468463-0a1e-4331-bc85-238c4fbeed65",
            "parentUUID": "4a29605f-b129-439d-be73-d5edf86fab93",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [],
        "fullFile": "/Users/kunalhire/workspace/leave-management-system/test/leaves/container/leaveFormSpec.js",
        "passes": [
          {
            "title": "should dispatch an action to fetch a leave",
            "fullTitle": "Leave Form Container should dispatch an action to fetch a leave",
            "timedOut": false,
            "duration": 8,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var shallowWrapper = wrapper.dive({ context: { store: store } });\nshallowWrapper.prop('fetchLeave')();\nvar executedAction = store.getActions()[0];\n(0, _chai.expect)(executedAction.type).equal('LEAVE_FETCHING');\n(0, _chai.expect)(executedAction.leaveId).equal(1234);",
            "err": {},
            "isRoot": false,
            "uuid": "71109318-369f-49d7-b7bd-2bf3d00802e6",
            "parentUUID": "4a29605f-b129-439d-be73-d5edf86fab93",
            "isHook": false,
            "skipped": false
          }
        ],
        "failures": [],
        "skipped": [],
        "hasBeforeHooks": true,
        "hasAfterHooks": false,
        "hasTests": true,
        "hasSuites": false,
        "totalTests": 1,
        "totalPasses": 1,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": true,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 8,
        "rootEmpty": false
      },
      {
        "title": "Leaves Action",
        "suites": [],
        "tests": [
          {
            "title": "should dispatch correct action when fetchLeave is called",
            "fullTitle": "Leaves Action should dispatch correct action when fetchLeave is called",
            "timedOut": false,
            "duration": 14,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var request = api.get('/leaves/1234').reply(200, leaveFormStub);\nstore.dispatch(_leavesActions.leavesActions.fetchLeave(1234)).then(function (resp) {\n    request.done();\n    var executedActions = store.getActions();\n    (0, _chai.expect)(executedActions[0].type).to.equal(_leavesActions.constants.LEAVE_FETCHING);\n    (0, _chai.expect)(executedActions[1].type).to.equal(_leavesActions.constants.LEAVE_FETCHED);\n    (0, _chai.expect)(executedActions[1].leave).to.deep.equal(leaveFormStub);\n    done();\n}).catch(done);",
            "err": {},
            "isRoot": false,
            "uuid": "7ec49a59-4572-4aa2-be2b-2166aef2616e",
            "parentUUID": "40ca9180-8da2-46d4-b3b9-f05f48eeecb1",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "should dispatch correct action when fetchLeave is called and returned error",
            "fullTitle": "Leaves Action should dispatch correct action when fetchLeave is called and returned error",
            "timedOut": false,
            "duration": 1,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var error = { error: 'error' };\nvar request = api.get('/leaves/1234').reply(500, error);\nstore.dispatch(_leavesActions.leavesActions.fetchLeave(1234)).then(function (resp) {\n    request.done();\n    var executedActions = store.getActions();\n    (0, _chai.expect)(executedActions[0].type).to.equal(_leavesActions.constants.LEAVE_FETCHING);\n    (0, _chai.expect)(executedActions[1].type).to.equal(_leavesActions.constants.LEAVE_ERROR);\n    (0, _chai.expect)(executedActions[1].error).to.deep.equal('Unable to retrieve the leave with id 1234: 500 (Internal Server Error)');\n    done();\n}).catch(done);",
            "err": {},
            "isRoot": false,
            "uuid": "643c7198-4ed2-4587-8ff8-0f93f9af0351",
            "parentUUID": "40ca9180-8da2-46d4-b3b9-f05f48eeecb1",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "should dispatch correct action when submitLeave is called",
            "fullTitle": "Leaves Action should dispatch correct action when submitLeave is called",
            "timedOut": false,
            "duration": 1,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var request = api.post('/leaves/').reply(201, leaveFormStub);\nstore.dispatch(_leavesActions.leavesActions.submitLeave(leaveFormStub)).then(function (resp) {\n    request.done();\n    var executedActions = store.getActions();\n    (0, _chai.expect)(executedActions[0].type).to.equal(_leavesActions.constants.LEAVE_FETCHED);\n    (0, _chai.expect)(executedActions[0].resp).to.deep.equal(leaveFormStub);\n    (0, _chai.expect)(executedActions[1].type).to.equal('@@router/CALL_HISTORY_METHOD');\n    (0, _chai.expect)(executedActions[1].payload).to.deep.equal({ method: 'push', args: ['/'] });\n    done();\n}).catch(done);",
            "err": {},
            "isRoot": false,
            "uuid": "6b2bc843-0d21-4215-a402-4852f3daf19b",
            "parentUUID": "40ca9180-8da2-46d4-b3b9-f05f48eeecb1",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "should dispatch correct action when submitLeave is called and returned error",
            "fullTitle": "Leaves Action should dispatch correct action when submitLeave is called and returned error",
            "timedOut": false,
            "duration": 1,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var error = { error: 'error' };\nvar request = api.post('/leaves/').reply(500, error);\nstore.dispatch(_leavesActions.leavesActions.submitLeave(leaveFormStub)).then(function (resp) {\n    request.done();\n    var executedActions = store.getActions();\n    (0, _chai.expect)(executedActions[0].type).to.equal(_leavesActions.constants.LEAVE_ERROR);\n    (0, _chai.expect)(executedActions[0].error).to.deep.equal('Unable to submit the leave: 500 (Internal Server Error)');\n    done();\n}).catch(done);",
            "err": {},
            "isRoot": false,
            "uuid": "15ab7e8a-1ffb-401f-883a-ca6f82bd8be1",
            "parentUUID": "40ca9180-8da2-46d4-b3b9-f05f48eeecb1",
            "isHook": false,
            "skipped": false
          }
        ],
        "pending": [],
        "root": false,
        "_timeout": 2000,
        "file": "/test/leaves/leavesActionSpec.js",
        "uuid": "40ca9180-8da2-46d4-b3b9-f05f48eeecb1",
        "beforeHooks": [
          {
            "title": "\"before all\" hook",
            "fullTitle": "Leaves Action \"before all\" hook",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "mockStore = (0, _reduxMockStore2.default)([_reduxThunk2.default]);\napi = (0, _nock2.default)(_http.config.serverUrl);",
            "err": {},
            "isRoot": false,
            "uuid": "cb9434f8-78e1-472c-962f-d0b93def34fd",
            "parentUUID": "40ca9180-8da2-46d4-b3b9-f05f48eeecb1",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook",
            "fullTitle": "Leaves Action \"before each\" hook",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "store = mockStore({});",
            "err": {},
            "isRoot": false,
            "uuid": "443b6a59-c989-4c07-b4cb-c339de223dfa",
            "parentUUID": "40ca9180-8da2-46d4-b3b9-f05f48eeecb1",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [
          {
            "title": "\"after each\" hook",
            "fullTitle": "Leaves Action \"after each\" hook",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "store.clearActions();\n_nock2.default.cleanAll();",
            "err": {},
            "isRoot": false,
            "uuid": "5e168489-2be8-4381-aa43-89b6fcc7a3bc",
            "parentUUID": "40ca9180-8da2-46d4-b3b9-f05f48eeecb1",
            "isHook": true,
            "skipped": false
          }
        ],
        "fullFile": "/Users/kunalhire/workspace/leave-management-system/test/leaves/leavesActionSpec.js",
        "passes": [
          {
            "title": "should dispatch correct action when fetchLeave is called",
            "fullTitle": "Leaves Action should dispatch correct action when fetchLeave is called",
            "timedOut": false,
            "duration": 14,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var request = api.get('/leaves/1234').reply(200, leaveFormStub);\nstore.dispatch(_leavesActions.leavesActions.fetchLeave(1234)).then(function (resp) {\n    request.done();\n    var executedActions = store.getActions();\n    (0, _chai.expect)(executedActions[0].type).to.equal(_leavesActions.constants.LEAVE_FETCHING);\n    (0, _chai.expect)(executedActions[1].type).to.equal(_leavesActions.constants.LEAVE_FETCHED);\n    (0, _chai.expect)(executedActions[1].leave).to.deep.equal(leaveFormStub);\n    done();\n}).catch(done);",
            "err": {},
            "isRoot": false,
            "uuid": "7ec49a59-4572-4aa2-be2b-2166aef2616e",
            "parentUUID": "40ca9180-8da2-46d4-b3b9-f05f48eeecb1",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "should dispatch correct action when fetchLeave is called and returned error",
            "fullTitle": "Leaves Action should dispatch correct action when fetchLeave is called and returned error",
            "timedOut": false,
            "duration": 1,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var error = { error: 'error' };\nvar request = api.get('/leaves/1234').reply(500, error);\nstore.dispatch(_leavesActions.leavesActions.fetchLeave(1234)).then(function (resp) {\n    request.done();\n    var executedActions = store.getActions();\n    (0, _chai.expect)(executedActions[0].type).to.equal(_leavesActions.constants.LEAVE_FETCHING);\n    (0, _chai.expect)(executedActions[1].type).to.equal(_leavesActions.constants.LEAVE_ERROR);\n    (0, _chai.expect)(executedActions[1].error).to.deep.equal('Unable to retrieve the leave with id 1234: 500 (Internal Server Error)');\n    done();\n}).catch(done);",
            "err": {},
            "isRoot": false,
            "uuid": "643c7198-4ed2-4587-8ff8-0f93f9af0351",
            "parentUUID": "40ca9180-8da2-46d4-b3b9-f05f48eeecb1",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "should dispatch correct action when submitLeave is called",
            "fullTitle": "Leaves Action should dispatch correct action when submitLeave is called",
            "timedOut": false,
            "duration": 1,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var request = api.post('/leaves/').reply(201, leaveFormStub);\nstore.dispatch(_leavesActions.leavesActions.submitLeave(leaveFormStub)).then(function (resp) {\n    request.done();\n    var executedActions = store.getActions();\n    (0, _chai.expect)(executedActions[0].type).to.equal(_leavesActions.constants.LEAVE_FETCHED);\n    (0, _chai.expect)(executedActions[0].resp).to.deep.equal(leaveFormStub);\n    (0, _chai.expect)(executedActions[1].type).to.equal('@@router/CALL_HISTORY_METHOD');\n    (0, _chai.expect)(executedActions[1].payload).to.deep.equal({ method: 'push', args: ['/'] });\n    done();\n}).catch(done);",
            "err": {},
            "isRoot": false,
            "uuid": "6b2bc843-0d21-4215-a402-4852f3daf19b",
            "parentUUID": "40ca9180-8da2-46d4-b3b9-f05f48eeecb1",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "should dispatch correct action when submitLeave is called and returned error",
            "fullTitle": "Leaves Action should dispatch correct action when submitLeave is called and returned error",
            "timedOut": false,
            "duration": 1,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var error = { error: 'error' };\nvar request = api.post('/leaves/').reply(500, error);\nstore.dispatch(_leavesActions.leavesActions.submitLeave(leaveFormStub)).then(function (resp) {\n    request.done();\n    var executedActions = store.getActions();\n    (0, _chai.expect)(executedActions[0].type).to.equal(_leavesActions.constants.LEAVE_ERROR);\n    (0, _chai.expect)(executedActions[0].error).to.deep.equal('Unable to submit the leave: 500 (Internal Server Error)');\n    done();\n}).catch(done);",
            "err": {},
            "isRoot": false,
            "uuid": "15ab7e8a-1ffb-401f-883a-ca6f82bd8be1",
            "parentUUID": "40ca9180-8da2-46d4-b3b9-f05f48eeecb1",
            "isHook": false,
            "skipped": false
          }
        ],
        "failures": [],
        "skipped": [],
        "hasBeforeHooks": true,
        "hasAfterHooks": true,
        "hasTests": true,
        "hasSuites": false,
        "totalTests": 4,
        "totalPasses": 4,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": true,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 17,
        "rootEmpty": false
      },
      {
        "title": "Leaves Reducer",
        "suites": [],
        "tests": [
          {
            "title": "should return the initial state",
            "fullTitle": "Leaves Reducer should return the initial state",
            "timedOut": false,
            "duration": 1,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "(0, _chai.expect)((0, _leavesReducer2.default)(undefined, {})).deep.equal({ leaves: [], leave: {} });",
            "err": {},
            "isRoot": false,
            "uuid": "575e2da9-14a8-4335-a957-b726de0d2869",
            "parentUUID": "17ec67eb-43c4-4615-8d7b-0b3244249baf",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "should return a new state with status LOADING when a LEAVE_FETCHING action is received",
            "fullTitle": "Leaves Reducer should return a new state with status LOADING when a LEAVE_FETCHING action is received",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var action = { type: _leavesActions.constants.LEAVE_FETCHING };\nvar updatedState = (0, _leavesReducer2.default)(undefined, action);\n(0, _chai.expect)(updatedState.status).to.equal(\"LOADING\");",
            "err": {},
            "isRoot": false,
            "uuid": "b031dd23-5e29-48ba-a666-f4994d01173e",
            "parentUUID": "17ec67eb-43c4-4615-8d7b-0b3244249baf",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "should return a new state with status LOADING when a LEAVE_FETCHED action is received",
            "fullTitle": "Leaves Reducer should return a new state with status LOADING when a LEAVE_FETCHED action is received",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var leave = { dummy: 'dummy' };\nvar action = { type: _leavesActions.constants.LEAVE_FETCHED, leave: leave };\nvar updatedState = (0, _leavesReducer2.default)(undefined, action);\n(0, _chai.expect)(updatedState.leave).deep.equal(leave);",
            "err": {},
            "isRoot": false,
            "uuid": "76d3f9aa-11f2-44c1-bd24-d4b35c3776cd",
            "parentUUID": "17ec67eb-43c4-4615-8d7b-0b3244249baf",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "should return a new state with status LOADING when a LEAVE_ERROR action is received",
            "fullTitle": "Leaves Reducer should return a new state with status LOADING when a LEAVE_ERROR action is received",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var error = { error: 'dummy' };\nvar action = { type: _leavesActions.constants.LEAVE_ERROR, error: error };\nvar updatedState = (0, _leavesReducer2.default)(undefined, action);\n(0, _chai.expect)(updatedState.error).deep.equal(error);",
            "err": {},
            "isRoot": false,
            "uuid": "7e4f60b2-e3df-463a-9484-cae664471d91",
            "parentUUID": "17ec67eb-43c4-4615-8d7b-0b3244249baf",
            "isHook": false,
            "skipped": false
          }
        ],
        "pending": [],
        "root": false,
        "_timeout": 2000,
        "file": "/test/leaves/leavesReducerSpec.js",
        "uuid": "17ec67eb-43c4-4615-8d7b-0b3244249baf",
        "beforeHooks": [],
        "afterHooks": [],
        "fullFile": "/Users/kunalhire/workspace/leave-management-system/test/leaves/leavesReducerSpec.js",
        "passes": [
          {
            "title": "should return the initial state",
            "fullTitle": "Leaves Reducer should return the initial state",
            "timedOut": false,
            "duration": 1,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "(0, _chai.expect)((0, _leavesReducer2.default)(undefined, {})).deep.equal({ leaves: [], leave: {} });",
            "err": {},
            "isRoot": false,
            "uuid": "575e2da9-14a8-4335-a957-b726de0d2869",
            "parentUUID": "17ec67eb-43c4-4615-8d7b-0b3244249baf",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "should return a new state with status LOADING when a LEAVE_FETCHING action is received",
            "fullTitle": "Leaves Reducer should return a new state with status LOADING when a LEAVE_FETCHING action is received",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var action = { type: _leavesActions.constants.LEAVE_FETCHING };\nvar updatedState = (0, _leavesReducer2.default)(undefined, action);\n(0, _chai.expect)(updatedState.status).to.equal(\"LOADING\");",
            "err": {},
            "isRoot": false,
            "uuid": "b031dd23-5e29-48ba-a666-f4994d01173e",
            "parentUUID": "17ec67eb-43c4-4615-8d7b-0b3244249baf",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "should return a new state with status LOADING when a LEAVE_FETCHED action is received",
            "fullTitle": "Leaves Reducer should return a new state with status LOADING when a LEAVE_FETCHED action is received",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var leave = { dummy: 'dummy' };\nvar action = { type: _leavesActions.constants.LEAVE_FETCHED, leave: leave };\nvar updatedState = (0, _leavesReducer2.default)(undefined, action);\n(0, _chai.expect)(updatedState.leave).deep.equal(leave);",
            "err": {},
            "isRoot": false,
            "uuid": "76d3f9aa-11f2-44c1-bd24-d4b35c3776cd",
            "parentUUID": "17ec67eb-43c4-4615-8d7b-0b3244249baf",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "should return a new state with status LOADING when a LEAVE_ERROR action is received",
            "fullTitle": "Leaves Reducer should return a new state with status LOADING when a LEAVE_ERROR action is received",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var error = { error: 'dummy' };\nvar action = { type: _leavesActions.constants.LEAVE_ERROR, error: error };\nvar updatedState = (0, _leavesReducer2.default)(undefined, action);\n(0, _chai.expect)(updatedState.error).deep.equal(error);",
            "err": {},
            "isRoot": false,
            "uuid": "7e4f60b2-e3df-463a-9484-cae664471d91",
            "parentUUID": "17ec67eb-43c4-4615-8d7b-0b3244249baf",
            "isHook": false,
            "skipped": false
          }
        ],
        "failures": [],
        "skipped": [],
        "hasBeforeHooks": false,
        "hasAfterHooks": false,
        "hasTests": true,
        "hasSuites": false,
        "totalTests": 4,
        "totalPasses": 4,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": true,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 1,
        "rootEmpty": false
      }
    ],
    "tests": [],
    "pending": [],
    "root": true,
    "_timeout": 2000,
    "uuid": "2ac66811-8410-4889-a0fd-a81a1aadb205",
    "beforeHooks": [],
    "afterHooks": [],
    "fullFile": "",
    "file": "",
    "passes": [],
    "failures": [],
    "skipped": [],
    "hasBeforeHooks": false,
    "hasAfterHooks": false,
    "hasTests": false,
    "hasSuites": true,
    "totalTests": 0,
    "totalPasses": 0,
    "totalFailures": 0,
    "totalPending": 0,
    "totalSkipped": 0,
    "hasPasses": false,
    "hasFailures": false,
    "hasPending": false,
    "hasSkipped": false,
    "duration": 0,
    "rootEmpty": true
  },
  "allTests": [
    {
      "title": "should render NewLeave button",
      "fullTitle": "Render should render NewLeave button",
      "timedOut": false,
      "duration": 3,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var newLeaveBtn = wrapper.find('Button');\n(0, _chai.expect)(newLeaveBtn.type()).equal(_reactBootstrap.Button);\n(0, _chai.expect)(newLeaveBtn.prop('children')).equal('New Leave');",
      "err": {},
      "isRoot": false,
      "uuid": "3662e226-25e4-432c-a1eb-97ff981acc7f",
      "parentUUID": "96d7d63e-28fb-49c9-9ff9-d35ce0d4a017",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should navigate to new leave page when clicked on New Leave button",
      "fullTitle": "Event Handlers should navigate to new leave page when clicked on New Leave button",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var newLeaveBtn = wrapper.find('Button');\nnewLeaveBtn.simulate('click', { preventDefault: function preventDefault() {} });\n(0, _chai.expect)(navigateToNewLeaveStub.called).equal(true);",
      "err": {},
      "isRoot": false,
      "uuid": "76650b8b-b36a-4c0e-ae45-3412f44fd4fd",
      "parentUUID": "f751c834-cb86-4781-8fa4-e5dc4af31484",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should have the correct form name",
      "fullTitle": "Render should have the correct form name",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var title = wrapper.find('h2');\n(0, _chai.expect)(title.text()).equal(\"Leave Management System\");",
      "err": {},
      "isRoot": false,
      "uuid": "de9f2aa1-4878-4d9a-94bf-5600df46fca4",
      "parentUUID": "ef8d2ced-2b07-47b6-a6d3-b58abe902fc5",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should render fromDate",
      "fullTitle": "Render should render fromDate",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var fromDate = wrapper.find('#fromDate');\n(0, _chai.expect)(fromDate.type()).equal(_fieldGroup2.default);\n(0, _chai.expect)(fromDate.prop('type')).equal('date');\n(0, _chai.expect)(fromDate.prop('label')).equal('From');",
      "err": {},
      "isRoot": false,
      "uuid": "43176495-b1c2-49a5-b9cf-8485dd4b5ab3",
      "parentUUID": "ef8d2ced-2b07-47b6-a6d3-b58abe902fc5",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should render toDate",
      "fullTitle": "Render should render toDate",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var toDate = wrapper.find('#toDate');\n(0, _chai.expect)(toDate.type()).equal(_fieldGroup2.default);\n(0, _chai.expect)(toDate.prop('type')).equal('date');\n(0, _chai.expect)(toDate.prop('label')).equal('To');",
      "err": {},
      "isRoot": false,
      "uuid": "9e49c4fd-bb8f-4bb0-9895-242df200879f",
      "parentUUID": "ef8d2ced-2b07-47b6-a6d3-b58abe902fc5",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should render reason",
      "fullTitle": "Render should render reason",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var reason = wrapper.find('#reason');\n(0, _chai.expect)(reason.type()).equal(_fieldGroup2.default);\n(0, _chai.expect)(reason.prop('type')).equal('text');\n(0, _chai.expect)(reason.prop('label')).equal('Reason');",
      "err": {},
      "isRoot": false,
      "uuid": "5d9ffe79-8856-47ce-a5c5-124419d63a4c",
      "parentUUID": "ef8d2ced-2b07-47b6-a6d3-b58abe902fc5",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should render leaveType",
      "fullTitle": "Render should render leaveType",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var leaveType = wrapper.find('FormGroup');\n(0, _chai.expect)(leaveType.find('ControlLabel').prop('children')).equal('Leave Type');\nvar options = leaveType.find('FormControl');\n(0, _chai.expect)(options.childAt(0).prop('children')).equal('Paid Leaves');\n(0, _chai.expect)(options.childAt(1).prop('children')).equal('Leave Without Pay');\n(0, _chai.expect)(options.childAt(2).prop('children')).equal('Compensation Off');",
      "err": {},
      "isRoot": false,
      "uuid": "933f079c-7bd9-4b02-adcf-4f908f235fcf",
      "parentUUID": "ef8d2ced-2b07-47b6-a6d3-b58abe902fc5",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should render Submit Button",
      "fullTitle": "Render should render Submit Button",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var submitBtn = wrapper.find('#submitBtn');\n(0, _chai.expect)(submitBtn.type()).equal(_reactBootstrap.Button);\n(0, _chai.expect)(submitBtn.prop('children')).equal('Submit');",
      "err": {},
      "isRoot": false,
      "uuid": "937450b0-5f2f-430a-bf5f-32ad78ecb023",
      "parentUUID": "ef8d2ced-2b07-47b6-a6d3-b58abe902fc5",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should update fromDate when it is changed",
      "fullTitle": "Event Handlers should update fromDate when it is changed",
      "timedOut": false,
      "duration": 4,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var fromDate = wrapper.find('#fromDate');\nfromDate.simulate('change', { target: { value: '2018-04-01' } });\n(0, _chai.expect)(wrapper.state().fromDate.toString()).equal('Sun Apr 01 2018 02:00:00 GMT+0200 (CEST)');",
      "err": {},
      "isRoot": false,
      "uuid": "5da02cea-1ab0-4889-a8ff-842dd40bccca",
      "parentUUID": "1036084d-b50f-48e7-8095-025b1e8b16a5",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should update toDate when it is changed",
      "fullTitle": "Event Handlers should update toDate when it is changed",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var toDate = wrapper.find('#toDate');\ntoDate.simulate('change', { target: { value: '2018-04-03' } });\n(0, _chai.expect)(wrapper.state().toDate.toString()).equal('Tue Apr 03 2018 02:00:00 GMT+0200 (CEST)');",
      "err": {},
      "isRoot": false,
      "uuid": "c4e041a8-5e18-4440-9e9f-61ce65d58422",
      "parentUUID": "1036084d-b50f-48e7-8095-025b1e8b16a5",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should update reason when it is changed",
      "fullTitle": "Event Handlers should update reason when it is changed",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var reason = wrapper.find('#reason');\nreason.simulate('change', { target: { value: 'Vacations' } });\n(0, _chai.expect)(wrapper.state().reason.toString()).equal('Vacations');",
      "err": {},
      "isRoot": false,
      "uuid": "9205116b-8b54-4bf8-8ea8-ff46db43836a",
      "parentUUID": "1036084d-b50f-48e7-8095-025b1e8b16a5",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should update leave type when it is changed",
      "fullTitle": "Event Handlers should update leave type when it is changed",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var leaveType = wrapper.find('FormControl');\nleaveType.simulate('change', { target: { value: 'LOP' } });\n(0, _chai.expect)(wrapper.state().type.toString()).equal('LOP');",
      "err": {},
      "isRoot": false,
      "uuid": "38090359-27c9-4508-a626-ad40f52f97a6",
      "parentUUID": "1036084d-b50f-48e7-8095-025b1e8b16a5",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should submit leave when clicked on Submit",
      "fullTitle": "Event Handlers should submit leave when clicked on Submit",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var submitBtn = wrapper.find('#submitBtn');\nsubmitBtn.simulate('click', { preventDefault: function preventDefault() {} });\n(0, _chai.expect)(submitLeaveStub.called).equal(true);",
      "err": {},
      "isRoot": false,
      "uuid": "32b73d7d-8510-4e68-87a2-2e558f83adc6",
      "parentUUID": "1036084d-b50f-48e7-8095-025b1e8b16a5",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should dispatch an action to navigate To New Leave",
      "fullTitle": "Dashboard Container should dispatch an action to navigate To New Leave",
      "timedOut": false,
      "duration": 3,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var shallowWrapper = wrapper.dive({ context: { store: store } });\nshallowWrapper.prop('navigateToNewLeave')();\nvar executedAction = store.getActions()[0];\n(0, _chai.expect)(executedAction.type).equal('@@router/CALL_HISTORY_METHOD');\n(0, _chai.expect)(executedAction.payload).deep.equal({ method: 'push', args: ['new'] });",
      "err": {},
      "isRoot": false,
      "uuid": "07c3ea0b-47e1-4308-9d05-a59e446d5f9c",
      "parentUUID": "a0b54174-ae41-40e6-8ef9-10793ea6cb0e",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should dispatch an action to fetch a leave",
      "fullTitle": "Leave Form Container should dispatch an action to fetch a leave",
      "timedOut": false,
      "duration": 8,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var shallowWrapper = wrapper.dive({ context: { store: store } });\nshallowWrapper.prop('fetchLeave')();\nvar executedAction = store.getActions()[0];\n(0, _chai.expect)(executedAction.type).equal('LEAVE_FETCHING');\n(0, _chai.expect)(executedAction.leaveId).equal(1234);",
      "err": {},
      "isRoot": false,
      "uuid": "71109318-369f-49d7-b7bd-2bf3d00802e6",
      "parentUUID": "4a29605f-b129-439d-be73-d5edf86fab93",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should dispatch correct action when fetchLeave is called",
      "fullTitle": "Leaves Action should dispatch correct action when fetchLeave is called",
      "timedOut": false,
      "duration": 14,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var request = api.get('/leaves/1234').reply(200, leaveFormStub);\nstore.dispatch(_leavesActions.leavesActions.fetchLeave(1234)).then(function (resp) {\n    request.done();\n    var executedActions = store.getActions();\n    (0, _chai.expect)(executedActions[0].type).to.equal(_leavesActions.constants.LEAVE_FETCHING);\n    (0, _chai.expect)(executedActions[1].type).to.equal(_leavesActions.constants.LEAVE_FETCHED);\n    (0, _chai.expect)(executedActions[1].leave).to.deep.equal(leaveFormStub);\n    done();\n}).catch(done);",
      "err": {},
      "isRoot": false,
      "uuid": "7ec49a59-4572-4aa2-be2b-2166aef2616e",
      "parentUUID": "40ca9180-8da2-46d4-b3b9-f05f48eeecb1",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should dispatch correct action when fetchLeave is called and returned error",
      "fullTitle": "Leaves Action should dispatch correct action when fetchLeave is called and returned error",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var error = { error: 'error' };\nvar request = api.get('/leaves/1234').reply(500, error);\nstore.dispatch(_leavesActions.leavesActions.fetchLeave(1234)).then(function (resp) {\n    request.done();\n    var executedActions = store.getActions();\n    (0, _chai.expect)(executedActions[0].type).to.equal(_leavesActions.constants.LEAVE_FETCHING);\n    (0, _chai.expect)(executedActions[1].type).to.equal(_leavesActions.constants.LEAVE_ERROR);\n    (0, _chai.expect)(executedActions[1].error).to.deep.equal('Unable to retrieve the leave with id 1234: 500 (Internal Server Error)');\n    done();\n}).catch(done);",
      "err": {},
      "isRoot": false,
      "uuid": "643c7198-4ed2-4587-8ff8-0f93f9af0351",
      "parentUUID": "40ca9180-8da2-46d4-b3b9-f05f48eeecb1",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should dispatch correct action when submitLeave is called",
      "fullTitle": "Leaves Action should dispatch correct action when submitLeave is called",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var request = api.post('/leaves/').reply(201, leaveFormStub);\nstore.dispatch(_leavesActions.leavesActions.submitLeave(leaveFormStub)).then(function (resp) {\n    request.done();\n    var executedActions = store.getActions();\n    (0, _chai.expect)(executedActions[0].type).to.equal(_leavesActions.constants.LEAVE_FETCHED);\n    (0, _chai.expect)(executedActions[0].resp).to.deep.equal(leaveFormStub);\n    (0, _chai.expect)(executedActions[1].type).to.equal('@@router/CALL_HISTORY_METHOD');\n    (0, _chai.expect)(executedActions[1].payload).to.deep.equal({ method: 'push', args: ['/'] });\n    done();\n}).catch(done);",
      "err": {},
      "isRoot": false,
      "uuid": "6b2bc843-0d21-4215-a402-4852f3daf19b",
      "parentUUID": "40ca9180-8da2-46d4-b3b9-f05f48eeecb1",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should dispatch correct action when submitLeave is called and returned error",
      "fullTitle": "Leaves Action should dispatch correct action when submitLeave is called and returned error",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var error = { error: 'error' };\nvar request = api.post('/leaves/').reply(500, error);\nstore.dispatch(_leavesActions.leavesActions.submitLeave(leaveFormStub)).then(function (resp) {\n    request.done();\n    var executedActions = store.getActions();\n    (0, _chai.expect)(executedActions[0].type).to.equal(_leavesActions.constants.LEAVE_ERROR);\n    (0, _chai.expect)(executedActions[0].error).to.deep.equal('Unable to submit the leave: 500 (Internal Server Error)');\n    done();\n}).catch(done);",
      "err": {},
      "isRoot": false,
      "uuid": "15ab7e8a-1ffb-401f-883a-ca6f82bd8be1",
      "parentUUID": "40ca9180-8da2-46d4-b3b9-f05f48eeecb1",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should return the initial state",
      "fullTitle": "Leaves Reducer should return the initial state",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "(0, _chai.expect)((0, _leavesReducer2.default)(undefined, {})).deep.equal({ leaves: [], leave: {} });",
      "err": {},
      "isRoot": false,
      "uuid": "575e2da9-14a8-4335-a957-b726de0d2869",
      "parentUUID": "17ec67eb-43c4-4615-8d7b-0b3244249baf",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should return a new state with status LOADING when a LEAVE_FETCHING action is received",
      "fullTitle": "Leaves Reducer should return a new state with status LOADING when a LEAVE_FETCHING action is received",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var action = { type: _leavesActions.constants.LEAVE_FETCHING };\nvar updatedState = (0, _leavesReducer2.default)(undefined, action);\n(0, _chai.expect)(updatedState.status).to.equal(\"LOADING\");",
      "err": {},
      "isRoot": false,
      "uuid": "b031dd23-5e29-48ba-a666-f4994d01173e",
      "parentUUID": "17ec67eb-43c4-4615-8d7b-0b3244249baf",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should return a new state with status LOADING when a LEAVE_FETCHED action is received",
      "fullTitle": "Leaves Reducer should return a new state with status LOADING when a LEAVE_FETCHED action is received",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var leave = { dummy: 'dummy' };\nvar action = { type: _leavesActions.constants.LEAVE_FETCHED, leave: leave };\nvar updatedState = (0, _leavesReducer2.default)(undefined, action);\n(0, _chai.expect)(updatedState.leave).deep.equal(leave);",
      "err": {},
      "isRoot": false,
      "uuid": "76d3f9aa-11f2-44c1-bd24-d4b35c3776cd",
      "parentUUID": "17ec67eb-43c4-4615-8d7b-0b3244249baf",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should return a new state with status LOADING when a LEAVE_ERROR action is received",
      "fullTitle": "Leaves Reducer should return a new state with status LOADING when a LEAVE_ERROR action is received",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var error = { error: 'dummy' };\nvar action = { type: _leavesActions.constants.LEAVE_ERROR, error: error };\nvar updatedState = (0, _leavesReducer2.default)(undefined, action);\n(0, _chai.expect)(updatedState.error).deep.equal(error);",
      "err": {},
      "isRoot": false,
      "uuid": "7e4f60b2-e3df-463a-9484-cae664471d91",
      "parentUUID": "17ec67eb-43c4-4615-8d7b-0b3244249baf",
      "isHook": false,
      "skipped": false
    }
  ],
  "allPending": [],
  "allPasses": [
    {
      "title": "should render NewLeave button",
      "fullTitle": "Render should render NewLeave button",
      "timedOut": false,
      "duration": 3,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var newLeaveBtn = wrapper.find('Button');\n(0, _chai.expect)(newLeaveBtn.type()).equal(_reactBootstrap.Button);\n(0, _chai.expect)(newLeaveBtn.prop('children')).equal('New Leave');",
      "err": {},
      "isRoot": false,
      "uuid": "3662e226-25e4-432c-a1eb-97ff981acc7f",
      "parentUUID": "96d7d63e-28fb-49c9-9ff9-d35ce0d4a017",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should navigate to new leave page when clicked on New Leave button",
      "fullTitle": "Event Handlers should navigate to new leave page when clicked on New Leave button",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var newLeaveBtn = wrapper.find('Button');\nnewLeaveBtn.simulate('click', { preventDefault: function preventDefault() {} });\n(0, _chai.expect)(navigateToNewLeaveStub.called).equal(true);",
      "err": {},
      "isRoot": false,
      "uuid": "76650b8b-b36a-4c0e-ae45-3412f44fd4fd",
      "parentUUID": "f751c834-cb86-4781-8fa4-e5dc4af31484",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should have the correct form name",
      "fullTitle": "Render should have the correct form name",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var title = wrapper.find('h2');\n(0, _chai.expect)(title.text()).equal(\"Leave Management System\");",
      "err": {},
      "isRoot": false,
      "uuid": "de9f2aa1-4878-4d9a-94bf-5600df46fca4",
      "parentUUID": "ef8d2ced-2b07-47b6-a6d3-b58abe902fc5",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should render fromDate",
      "fullTitle": "Render should render fromDate",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var fromDate = wrapper.find('#fromDate');\n(0, _chai.expect)(fromDate.type()).equal(_fieldGroup2.default);\n(0, _chai.expect)(fromDate.prop('type')).equal('date');\n(0, _chai.expect)(fromDate.prop('label')).equal('From');",
      "err": {},
      "isRoot": false,
      "uuid": "43176495-b1c2-49a5-b9cf-8485dd4b5ab3",
      "parentUUID": "ef8d2ced-2b07-47b6-a6d3-b58abe902fc5",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should render toDate",
      "fullTitle": "Render should render toDate",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var toDate = wrapper.find('#toDate');\n(0, _chai.expect)(toDate.type()).equal(_fieldGroup2.default);\n(0, _chai.expect)(toDate.prop('type')).equal('date');\n(0, _chai.expect)(toDate.prop('label')).equal('To');",
      "err": {},
      "isRoot": false,
      "uuid": "9e49c4fd-bb8f-4bb0-9895-242df200879f",
      "parentUUID": "ef8d2ced-2b07-47b6-a6d3-b58abe902fc5",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should render reason",
      "fullTitle": "Render should render reason",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var reason = wrapper.find('#reason');\n(0, _chai.expect)(reason.type()).equal(_fieldGroup2.default);\n(0, _chai.expect)(reason.prop('type')).equal('text');\n(0, _chai.expect)(reason.prop('label')).equal('Reason');",
      "err": {},
      "isRoot": false,
      "uuid": "5d9ffe79-8856-47ce-a5c5-124419d63a4c",
      "parentUUID": "ef8d2ced-2b07-47b6-a6d3-b58abe902fc5",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should render leaveType",
      "fullTitle": "Render should render leaveType",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var leaveType = wrapper.find('FormGroup');\n(0, _chai.expect)(leaveType.find('ControlLabel').prop('children')).equal('Leave Type');\nvar options = leaveType.find('FormControl');\n(0, _chai.expect)(options.childAt(0).prop('children')).equal('Paid Leaves');\n(0, _chai.expect)(options.childAt(1).prop('children')).equal('Leave Without Pay');\n(0, _chai.expect)(options.childAt(2).prop('children')).equal('Compensation Off');",
      "err": {},
      "isRoot": false,
      "uuid": "933f079c-7bd9-4b02-adcf-4f908f235fcf",
      "parentUUID": "ef8d2ced-2b07-47b6-a6d3-b58abe902fc5",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should render Submit Button",
      "fullTitle": "Render should render Submit Button",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var submitBtn = wrapper.find('#submitBtn');\n(0, _chai.expect)(submitBtn.type()).equal(_reactBootstrap.Button);\n(0, _chai.expect)(submitBtn.prop('children')).equal('Submit');",
      "err": {},
      "isRoot": false,
      "uuid": "937450b0-5f2f-430a-bf5f-32ad78ecb023",
      "parentUUID": "ef8d2ced-2b07-47b6-a6d3-b58abe902fc5",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should update fromDate when it is changed",
      "fullTitle": "Event Handlers should update fromDate when it is changed",
      "timedOut": false,
      "duration": 4,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var fromDate = wrapper.find('#fromDate');\nfromDate.simulate('change', { target: { value: '2018-04-01' } });\n(0, _chai.expect)(wrapper.state().fromDate.toString()).equal('Sun Apr 01 2018 02:00:00 GMT+0200 (CEST)');",
      "err": {},
      "isRoot": false,
      "uuid": "5da02cea-1ab0-4889-a8ff-842dd40bccca",
      "parentUUID": "1036084d-b50f-48e7-8095-025b1e8b16a5",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should update toDate when it is changed",
      "fullTitle": "Event Handlers should update toDate when it is changed",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var toDate = wrapper.find('#toDate');\ntoDate.simulate('change', { target: { value: '2018-04-03' } });\n(0, _chai.expect)(wrapper.state().toDate.toString()).equal('Tue Apr 03 2018 02:00:00 GMT+0200 (CEST)');",
      "err": {},
      "isRoot": false,
      "uuid": "c4e041a8-5e18-4440-9e9f-61ce65d58422",
      "parentUUID": "1036084d-b50f-48e7-8095-025b1e8b16a5",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should update reason when it is changed",
      "fullTitle": "Event Handlers should update reason when it is changed",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var reason = wrapper.find('#reason');\nreason.simulate('change', { target: { value: 'Vacations' } });\n(0, _chai.expect)(wrapper.state().reason.toString()).equal('Vacations');",
      "err": {},
      "isRoot": false,
      "uuid": "9205116b-8b54-4bf8-8ea8-ff46db43836a",
      "parentUUID": "1036084d-b50f-48e7-8095-025b1e8b16a5",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should update leave type when it is changed",
      "fullTitle": "Event Handlers should update leave type when it is changed",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var leaveType = wrapper.find('FormControl');\nleaveType.simulate('change', { target: { value: 'LOP' } });\n(0, _chai.expect)(wrapper.state().type.toString()).equal('LOP');",
      "err": {},
      "isRoot": false,
      "uuid": "38090359-27c9-4508-a626-ad40f52f97a6",
      "parentUUID": "1036084d-b50f-48e7-8095-025b1e8b16a5",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should submit leave when clicked on Submit",
      "fullTitle": "Event Handlers should submit leave when clicked on Submit",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var submitBtn = wrapper.find('#submitBtn');\nsubmitBtn.simulate('click', { preventDefault: function preventDefault() {} });\n(0, _chai.expect)(submitLeaveStub.called).equal(true);",
      "err": {},
      "isRoot": false,
      "uuid": "32b73d7d-8510-4e68-87a2-2e558f83adc6",
      "parentUUID": "1036084d-b50f-48e7-8095-025b1e8b16a5",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should dispatch an action to navigate To New Leave",
      "fullTitle": "Dashboard Container should dispatch an action to navigate To New Leave",
      "timedOut": false,
      "duration": 3,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var shallowWrapper = wrapper.dive({ context: { store: store } });\nshallowWrapper.prop('navigateToNewLeave')();\nvar executedAction = store.getActions()[0];\n(0, _chai.expect)(executedAction.type).equal('@@router/CALL_HISTORY_METHOD');\n(0, _chai.expect)(executedAction.payload).deep.equal({ method: 'push', args: ['new'] });",
      "err": {},
      "isRoot": false,
      "uuid": "07c3ea0b-47e1-4308-9d05-a59e446d5f9c",
      "parentUUID": "a0b54174-ae41-40e6-8ef9-10793ea6cb0e",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should dispatch an action to fetch a leave",
      "fullTitle": "Leave Form Container should dispatch an action to fetch a leave",
      "timedOut": false,
      "duration": 8,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var shallowWrapper = wrapper.dive({ context: { store: store } });\nshallowWrapper.prop('fetchLeave')();\nvar executedAction = store.getActions()[0];\n(0, _chai.expect)(executedAction.type).equal('LEAVE_FETCHING');\n(0, _chai.expect)(executedAction.leaveId).equal(1234);",
      "err": {},
      "isRoot": false,
      "uuid": "71109318-369f-49d7-b7bd-2bf3d00802e6",
      "parentUUID": "4a29605f-b129-439d-be73-d5edf86fab93",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should dispatch correct action when fetchLeave is called",
      "fullTitle": "Leaves Action should dispatch correct action when fetchLeave is called",
      "timedOut": false,
      "duration": 14,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var request = api.get('/leaves/1234').reply(200, leaveFormStub);\nstore.dispatch(_leavesActions.leavesActions.fetchLeave(1234)).then(function (resp) {\n    request.done();\n    var executedActions = store.getActions();\n    (0, _chai.expect)(executedActions[0].type).to.equal(_leavesActions.constants.LEAVE_FETCHING);\n    (0, _chai.expect)(executedActions[1].type).to.equal(_leavesActions.constants.LEAVE_FETCHED);\n    (0, _chai.expect)(executedActions[1].leave).to.deep.equal(leaveFormStub);\n    done();\n}).catch(done);",
      "err": {},
      "isRoot": false,
      "uuid": "7ec49a59-4572-4aa2-be2b-2166aef2616e",
      "parentUUID": "40ca9180-8da2-46d4-b3b9-f05f48eeecb1",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should dispatch correct action when fetchLeave is called and returned error",
      "fullTitle": "Leaves Action should dispatch correct action when fetchLeave is called and returned error",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var error = { error: 'error' };\nvar request = api.get('/leaves/1234').reply(500, error);\nstore.dispatch(_leavesActions.leavesActions.fetchLeave(1234)).then(function (resp) {\n    request.done();\n    var executedActions = store.getActions();\n    (0, _chai.expect)(executedActions[0].type).to.equal(_leavesActions.constants.LEAVE_FETCHING);\n    (0, _chai.expect)(executedActions[1].type).to.equal(_leavesActions.constants.LEAVE_ERROR);\n    (0, _chai.expect)(executedActions[1].error).to.deep.equal('Unable to retrieve the leave with id 1234: 500 (Internal Server Error)');\n    done();\n}).catch(done);",
      "err": {},
      "isRoot": false,
      "uuid": "643c7198-4ed2-4587-8ff8-0f93f9af0351",
      "parentUUID": "40ca9180-8da2-46d4-b3b9-f05f48eeecb1",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should dispatch correct action when submitLeave is called",
      "fullTitle": "Leaves Action should dispatch correct action when submitLeave is called",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var request = api.post('/leaves/').reply(201, leaveFormStub);\nstore.dispatch(_leavesActions.leavesActions.submitLeave(leaveFormStub)).then(function (resp) {\n    request.done();\n    var executedActions = store.getActions();\n    (0, _chai.expect)(executedActions[0].type).to.equal(_leavesActions.constants.LEAVE_FETCHED);\n    (0, _chai.expect)(executedActions[0].resp).to.deep.equal(leaveFormStub);\n    (0, _chai.expect)(executedActions[1].type).to.equal('@@router/CALL_HISTORY_METHOD');\n    (0, _chai.expect)(executedActions[1].payload).to.deep.equal({ method: 'push', args: ['/'] });\n    done();\n}).catch(done);",
      "err": {},
      "isRoot": false,
      "uuid": "6b2bc843-0d21-4215-a402-4852f3daf19b",
      "parentUUID": "40ca9180-8da2-46d4-b3b9-f05f48eeecb1",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should dispatch correct action when submitLeave is called and returned error",
      "fullTitle": "Leaves Action should dispatch correct action when submitLeave is called and returned error",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var error = { error: 'error' };\nvar request = api.post('/leaves/').reply(500, error);\nstore.dispatch(_leavesActions.leavesActions.submitLeave(leaveFormStub)).then(function (resp) {\n    request.done();\n    var executedActions = store.getActions();\n    (0, _chai.expect)(executedActions[0].type).to.equal(_leavesActions.constants.LEAVE_ERROR);\n    (0, _chai.expect)(executedActions[0].error).to.deep.equal('Unable to submit the leave: 500 (Internal Server Error)');\n    done();\n}).catch(done);",
      "err": {},
      "isRoot": false,
      "uuid": "15ab7e8a-1ffb-401f-883a-ca6f82bd8be1",
      "parentUUID": "40ca9180-8da2-46d4-b3b9-f05f48eeecb1",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should return the initial state",
      "fullTitle": "Leaves Reducer should return the initial state",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "(0, _chai.expect)((0, _leavesReducer2.default)(undefined, {})).deep.equal({ leaves: [], leave: {} });",
      "err": {},
      "isRoot": false,
      "uuid": "575e2da9-14a8-4335-a957-b726de0d2869",
      "parentUUID": "17ec67eb-43c4-4615-8d7b-0b3244249baf",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should return a new state with status LOADING when a LEAVE_FETCHING action is received",
      "fullTitle": "Leaves Reducer should return a new state with status LOADING when a LEAVE_FETCHING action is received",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var action = { type: _leavesActions.constants.LEAVE_FETCHING };\nvar updatedState = (0, _leavesReducer2.default)(undefined, action);\n(0, _chai.expect)(updatedState.status).to.equal(\"LOADING\");",
      "err": {},
      "isRoot": false,
      "uuid": "b031dd23-5e29-48ba-a666-f4994d01173e",
      "parentUUID": "17ec67eb-43c4-4615-8d7b-0b3244249baf",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should return a new state with status LOADING when a LEAVE_FETCHED action is received",
      "fullTitle": "Leaves Reducer should return a new state with status LOADING when a LEAVE_FETCHED action is received",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var leave = { dummy: 'dummy' };\nvar action = { type: _leavesActions.constants.LEAVE_FETCHED, leave: leave };\nvar updatedState = (0, _leavesReducer2.default)(undefined, action);\n(0, _chai.expect)(updatedState.leave).deep.equal(leave);",
      "err": {},
      "isRoot": false,
      "uuid": "76d3f9aa-11f2-44c1-bd24-d4b35c3776cd",
      "parentUUID": "17ec67eb-43c4-4615-8d7b-0b3244249baf",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should return a new state with status LOADING when a LEAVE_ERROR action is received",
      "fullTitle": "Leaves Reducer should return a new state with status LOADING when a LEAVE_ERROR action is received",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var error = { error: 'dummy' };\nvar action = { type: _leavesActions.constants.LEAVE_ERROR, error: error };\nvar updatedState = (0, _leavesReducer2.default)(undefined, action);\n(0, _chai.expect)(updatedState.error).deep.equal(error);",
      "err": {},
      "isRoot": false,
      "uuid": "7e4f60b2-e3df-463a-9484-cae664471d91",
      "parentUUID": "17ec67eb-43c4-4615-8d7b-0b3244249baf",
      "isHook": false,
      "skipped": false
    }
  ],
  "allFailures": [],
  "copyrightYear": 2018
}