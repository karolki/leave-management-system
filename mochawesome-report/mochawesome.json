{
  "stats": {
    "suites": 9,
    "tests": 25,
    "passes": 25,
    "pending": 0,
    "failures": 0,
    "start": "2018-04-05T19:54:17.928Z",
    "end": "2018-04-05T19:54:18.008Z",
    "duration": 80,
    "testsRegistered": 25,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false,
    "passPercentClass": "success",
    "pendingPercentClass": "danger"
  },
  "suites": {
    "title": "",
    "suites": [
      {
        "title": "Dashboard",
        "suites": [
          {
            "title": "Render",
            "suites": [],
            "tests": [
              {
                "title": "should render NewLeave button",
                "fullTitle": "Dashboard Render should render NewLeave button",
                "timedOut": false,
                "duration": 3,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var newLeaveBtn = wrapper.find('Button');\n(0, _chai.expect)(newLeaveBtn.type()).equal(_reactBootstrap.Button);\n(0, _chai.expect)(newLeaveBtn.prop('children')).equal('New Leave');",
                "err": {},
                "isRoot": false,
                "uuid": "c6c72b38-c223-4739-989c-8b177dfbe45c",
                "parentUUID": "3eb79d84-d200-4f00-8582-8997cde63619",
                "isHook": false,
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/test/leaves/components/dashboardSpec.js",
            "uuid": "3eb79d84-d200-4f00-8582-8997cde63619",
            "beforeHooks": [],
            "afterHooks": [],
            "fullFile": "/Users/kunalhire/workspace/leave-management-system/test/leaves/components/dashboardSpec.js",
            "passes": [
              {
                "title": "should render NewLeave button",
                "fullTitle": "Dashboard Render should render NewLeave button",
                "timedOut": false,
                "duration": 3,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var newLeaveBtn = wrapper.find('Button');\n(0, _chai.expect)(newLeaveBtn.type()).equal(_reactBootstrap.Button);\n(0, _chai.expect)(newLeaveBtn.prop('children')).equal('New Leave');",
                "err": {},
                "isRoot": false,
                "uuid": "c6c72b38-c223-4739-989c-8b177dfbe45c",
                "parentUUID": "3eb79d84-d200-4f00-8582-8997cde63619",
                "isHook": false,
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasBeforeHooks": false,
            "hasAfterHooks": false,
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 1,
            "totalPasses": 1,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 3,
            "rootEmpty": false
          },
          {
            "title": "Event Handlers",
            "suites": [],
            "tests": [
              {
                "title": "should navigate to new leave page when clicked on New Leave button",
                "fullTitle": "Dashboard Event Handlers should navigate to new leave page when clicked on New Leave button",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var newLeaveBtn = wrapper.find('Button');\nnewLeaveBtn.simulate('click', { preventDefault: function preventDefault() {} });\n(0, _chai.expect)(navigateToNewLeaveStub.called).equal(true);",
                "err": {},
                "isRoot": false,
                "uuid": "da2aace8-4522-4ca8-83ee-1988c337074a",
                "parentUUID": "42ff4056-136b-4c18-b944-625b4d0acef8",
                "isHook": false,
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/test/leaves/components/dashboardSpec.js",
            "uuid": "42ff4056-136b-4c18-b944-625b4d0acef8",
            "beforeHooks": [],
            "afterHooks": [],
            "fullFile": "/Users/kunalhire/workspace/leave-management-system/test/leaves/components/dashboardSpec.js",
            "passes": [
              {
                "title": "should navigate to new leave page when clicked on New Leave button",
                "fullTitle": "Dashboard Event Handlers should navigate to new leave page when clicked on New Leave button",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var newLeaveBtn = wrapper.find('Button');\nnewLeaveBtn.simulate('click', { preventDefault: function preventDefault() {} });\n(0, _chai.expect)(navigateToNewLeaveStub.called).equal(true);",
                "err": {},
                "isRoot": false,
                "uuid": "da2aace8-4522-4ca8-83ee-1988c337074a",
                "parentUUID": "42ff4056-136b-4c18-b944-625b4d0acef8",
                "isHook": false,
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasBeforeHooks": false,
            "hasAfterHooks": false,
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 1,
            "totalPasses": 1,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 1,
            "rootEmpty": false
          }
        ],
        "tests": [],
        "pending": [],
        "root": false,
        "_timeout": 2000,
        "file": "/test/leaves/components/dashboardSpec.js",
        "uuid": "952c4d1c-ace2-4955-aa79-8a7ecf0f9445",
        "beforeHooks": [
          {
            "title": "\"before each\" hook",
            "fullTitle": "Dashboard \"before each\" hook",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "wrapper = (0, _enzyme.shallow)(_react2.default.createElement(_dashboard2.default, { navigateToNewLeave: navigateToNewLeaveStub }));",
            "err": {},
            "isRoot": false,
            "uuid": "7d8f3140-4d3c-4270-b7f0-99e4ad75de2d",
            "parentUUID": "952c4d1c-ace2-4955-aa79-8a7ecf0f9445",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [],
        "fullFile": "/Users/kunalhire/workspace/leave-management-system/test/leaves/components/dashboardSpec.js",
        "passes": [],
        "failures": [],
        "skipped": [],
        "hasBeforeHooks": true,
        "hasAfterHooks": false,
        "hasTests": false,
        "hasSuites": true,
        "totalTests": 0,
        "totalPasses": 0,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": false,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 0,
        "rootEmpty": false
      },
      {
        "title": "Leave Form Component",
        "suites": [
          {
            "title": "Render",
            "suites": [],
            "tests": [
              {
                "title": "should have the correct form name",
                "fullTitle": "Leave Form Component Render should have the correct form name",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var title = wrapper.find('h2');\n(0, _chai.expect)(title.text()).equal(\"Leave Management System\");",
                "err": {},
                "isRoot": false,
                "uuid": "51809dc5-255a-4ead-8023-a19fc9d08f77",
                "parentUUID": "c709cfd0-9e0e-4821-b236-17abc18d4df1",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should render fromDate",
                "fullTitle": "Leave Form Component Render should render fromDate",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var fromDate = wrapper.find('#fromDate');\n(0, _chai.expect)(fromDate.type()).equal(_fieldGroup2.default);\n(0, _chai.expect)(fromDate.prop('type')).equal('date');\n(0, _chai.expect)(fromDate.prop('label')).equal('From');",
                "err": {},
                "isRoot": false,
                "uuid": "7e5f813b-a00f-4cb7-af9e-a030597b7711",
                "parentUUID": "c709cfd0-9e0e-4821-b236-17abc18d4df1",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should render toDate",
                "fullTitle": "Leave Form Component Render should render toDate",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var toDate = wrapper.find('#toDate');\n(0, _chai.expect)(toDate.type()).equal(_fieldGroup2.default);\n(0, _chai.expect)(toDate.prop('type')).equal('date');\n(0, _chai.expect)(toDate.prop('label')).equal('To');",
                "err": {},
                "isRoot": false,
                "uuid": "f73b47fb-a212-4b50-b3e8-4c27f281a2fe",
                "parentUUID": "c709cfd0-9e0e-4821-b236-17abc18d4df1",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should render reason",
                "fullTitle": "Leave Form Component Render should render reason",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var reason = wrapper.find('#reason');\n(0, _chai.expect)(reason.type()).equal(_fieldGroup2.default);\n(0, _chai.expect)(reason.prop('type')).equal('text');\n(0, _chai.expect)(reason.prop('label')).equal('Reason');",
                "err": {},
                "isRoot": false,
                "uuid": "6814705f-aef6-4cd1-b4a6-8e0817c4a6e3",
                "parentUUID": "c709cfd0-9e0e-4821-b236-17abc18d4df1",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should render leaveType",
                "fullTitle": "Leave Form Component Render should render leaveType",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var leaveType = wrapper.find('FormGroup');\n(0, _chai.expect)(leaveType.find('ControlLabel').prop('children')).equal('Leave Type');\nvar options = leaveType.find('FormControl');\n(0, _chai.expect)(options.childAt(0).prop('children')).equal('Paid Leaves');\n(0, _chai.expect)(options.childAt(1).prop('children')).equal('Leave Without Pay');\n(0, _chai.expect)(options.childAt(2).prop('children')).equal('Compensation Off');",
                "err": {},
                "isRoot": false,
                "uuid": "10cca0f3-d8bb-46cd-9291-3b29dd4ee8bf",
                "parentUUID": "c709cfd0-9e0e-4821-b236-17abc18d4df1",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should render Submit Button",
                "fullTitle": "Leave Form Component Render should render Submit Button",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var submitBtn = wrapper.find('#submitBtn');\n(0, _chai.expect)(submitBtn.type()).equal(_reactBootstrap.Button);\n(0, _chai.expect)(submitBtn.prop('children')).equal('Submit');",
                "err": {},
                "isRoot": false,
                "uuid": "380ecdde-bc26-40d5-b859-21c8be095e97",
                "parentUUID": "c709cfd0-9e0e-4821-b236-17abc18d4df1",
                "isHook": false,
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/test/leaves/components/leaveFormSpec.js",
            "uuid": "c709cfd0-9e0e-4821-b236-17abc18d4df1",
            "beforeHooks": [],
            "afterHooks": [],
            "fullFile": "/Users/kunalhire/workspace/leave-management-system/test/leaves/components/leaveFormSpec.js",
            "passes": [
              {
                "title": "should have the correct form name",
                "fullTitle": "Leave Form Component Render should have the correct form name",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var title = wrapper.find('h2');\n(0, _chai.expect)(title.text()).equal(\"Leave Management System\");",
                "err": {},
                "isRoot": false,
                "uuid": "51809dc5-255a-4ead-8023-a19fc9d08f77",
                "parentUUID": "c709cfd0-9e0e-4821-b236-17abc18d4df1",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should render fromDate",
                "fullTitle": "Leave Form Component Render should render fromDate",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var fromDate = wrapper.find('#fromDate');\n(0, _chai.expect)(fromDate.type()).equal(_fieldGroup2.default);\n(0, _chai.expect)(fromDate.prop('type')).equal('date');\n(0, _chai.expect)(fromDate.prop('label')).equal('From');",
                "err": {},
                "isRoot": false,
                "uuid": "7e5f813b-a00f-4cb7-af9e-a030597b7711",
                "parentUUID": "c709cfd0-9e0e-4821-b236-17abc18d4df1",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should render toDate",
                "fullTitle": "Leave Form Component Render should render toDate",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var toDate = wrapper.find('#toDate');\n(0, _chai.expect)(toDate.type()).equal(_fieldGroup2.default);\n(0, _chai.expect)(toDate.prop('type')).equal('date');\n(0, _chai.expect)(toDate.prop('label')).equal('To');",
                "err": {},
                "isRoot": false,
                "uuid": "f73b47fb-a212-4b50-b3e8-4c27f281a2fe",
                "parentUUID": "c709cfd0-9e0e-4821-b236-17abc18d4df1",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should render reason",
                "fullTitle": "Leave Form Component Render should render reason",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var reason = wrapper.find('#reason');\n(0, _chai.expect)(reason.type()).equal(_fieldGroup2.default);\n(0, _chai.expect)(reason.prop('type')).equal('text');\n(0, _chai.expect)(reason.prop('label')).equal('Reason');",
                "err": {},
                "isRoot": false,
                "uuid": "6814705f-aef6-4cd1-b4a6-8e0817c4a6e3",
                "parentUUID": "c709cfd0-9e0e-4821-b236-17abc18d4df1",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should render leaveType",
                "fullTitle": "Leave Form Component Render should render leaveType",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var leaveType = wrapper.find('FormGroup');\n(0, _chai.expect)(leaveType.find('ControlLabel').prop('children')).equal('Leave Type');\nvar options = leaveType.find('FormControl');\n(0, _chai.expect)(options.childAt(0).prop('children')).equal('Paid Leaves');\n(0, _chai.expect)(options.childAt(1).prop('children')).equal('Leave Without Pay');\n(0, _chai.expect)(options.childAt(2).prop('children')).equal('Compensation Off');",
                "err": {},
                "isRoot": false,
                "uuid": "10cca0f3-d8bb-46cd-9291-3b29dd4ee8bf",
                "parentUUID": "c709cfd0-9e0e-4821-b236-17abc18d4df1",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should render Submit Button",
                "fullTitle": "Leave Form Component Render should render Submit Button",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var submitBtn = wrapper.find('#submitBtn');\n(0, _chai.expect)(submitBtn.type()).equal(_reactBootstrap.Button);\n(0, _chai.expect)(submitBtn.prop('children')).equal('Submit');",
                "err": {},
                "isRoot": false,
                "uuid": "380ecdde-bc26-40d5-b859-21c8be095e97",
                "parentUUID": "c709cfd0-9e0e-4821-b236-17abc18d4df1",
                "isHook": false,
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasBeforeHooks": false,
            "hasAfterHooks": false,
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 6,
            "totalPasses": 6,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 2,
            "rootEmpty": false
          },
          {
            "title": "Event Handlers",
            "suites": [],
            "tests": [
              {
                "title": "should update fromDate when it is changed",
                "fullTitle": "Leave Form Component Event Handlers should update fromDate when it is changed",
                "timedOut": false,
                "duration": 4,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var fromDate = wrapper.find('#fromDate');\nfromDate.simulate('change', { target: { value: '2018-04-01' } });\n(0, _chai.expect)(wrapper.state().fromDate.toString()).equal('Sun Apr 01 2018 02:00:00 GMT+0200 (CEST)');",
                "err": {},
                "isRoot": false,
                "uuid": "6e4060a6-d7ad-4ee2-a0e0-15888f3ac0ff",
                "parentUUID": "35ce518b-8763-48f9-ba23-80da5d91ed72",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should update toDate when it is changed",
                "fullTitle": "Leave Form Component Event Handlers should update toDate when it is changed",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var toDate = wrapper.find('#toDate');\ntoDate.simulate('change', { target: { value: '2018-04-03' } });\n(0, _chai.expect)(wrapper.state().toDate.toString()).equal('Tue Apr 03 2018 02:00:00 GMT+0200 (CEST)');",
                "err": {},
                "isRoot": false,
                "uuid": "692996f9-2a9d-4b27-9a6c-4f0b8bfed734",
                "parentUUID": "35ce518b-8763-48f9-ba23-80da5d91ed72",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should update reason when it is changed",
                "fullTitle": "Leave Form Component Event Handlers should update reason when it is changed",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var reason = wrapper.find('#reason');\nreason.simulate('change', { target: { value: 'Vacations' } });\n(0, _chai.expect)(wrapper.state().reason.toString()).equal('Vacations');",
                "err": {},
                "isRoot": false,
                "uuid": "fd56a271-2baa-4005-a3ed-83fbabfd9435",
                "parentUUID": "35ce518b-8763-48f9-ba23-80da5d91ed72",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should update leave type when it is changed",
                "fullTitle": "Leave Form Component Event Handlers should update leave type when it is changed",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var leaveType = wrapper.find('FormControl');\nleaveType.simulate('change', { target: { value: 'LOP' } });\n(0, _chai.expect)(wrapper.state().type.toString()).equal('LOP');",
                "err": {},
                "isRoot": false,
                "uuid": "7f5b2e15-c45e-4726-8812-7f868355d4bf",
                "parentUUID": "35ce518b-8763-48f9-ba23-80da5d91ed72",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should submit leave when clicked on Submit",
                "fullTitle": "Leave Form Component Event Handlers should submit leave when clicked on Submit",
                "timedOut": false,
                "duration": 2,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var submitBtn = wrapper.find('#submitBtn');\nsubmitBtn.simulate('click', { preventDefault: function preventDefault() {} });\n(0, _chai.expect)(submitLeaveStub.called).equal(true);",
                "err": {},
                "isRoot": false,
                "uuid": "848d5904-a7a4-4401-90ef-b83dbc9cf667",
                "parentUUID": "35ce518b-8763-48f9-ba23-80da5d91ed72",
                "isHook": false,
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/test/leaves/components/leaveFormSpec.js",
            "uuid": "35ce518b-8763-48f9-ba23-80da5d91ed72",
            "beforeHooks": [],
            "afterHooks": [],
            "fullFile": "/Users/kunalhire/workspace/leave-management-system/test/leaves/components/leaveFormSpec.js",
            "passes": [
              {
                "title": "should update fromDate when it is changed",
                "fullTitle": "Leave Form Component Event Handlers should update fromDate when it is changed",
                "timedOut": false,
                "duration": 4,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var fromDate = wrapper.find('#fromDate');\nfromDate.simulate('change', { target: { value: '2018-04-01' } });\n(0, _chai.expect)(wrapper.state().fromDate.toString()).equal('Sun Apr 01 2018 02:00:00 GMT+0200 (CEST)');",
                "err": {},
                "isRoot": false,
                "uuid": "6e4060a6-d7ad-4ee2-a0e0-15888f3ac0ff",
                "parentUUID": "35ce518b-8763-48f9-ba23-80da5d91ed72",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should update toDate when it is changed",
                "fullTitle": "Leave Form Component Event Handlers should update toDate when it is changed",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var toDate = wrapper.find('#toDate');\ntoDate.simulate('change', { target: { value: '2018-04-03' } });\n(0, _chai.expect)(wrapper.state().toDate.toString()).equal('Tue Apr 03 2018 02:00:00 GMT+0200 (CEST)');",
                "err": {},
                "isRoot": false,
                "uuid": "692996f9-2a9d-4b27-9a6c-4f0b8bfed734",
                "parentUUID": "35ce518b-8763-48f9-ba23-80da5d91ed72",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should update reason when it is changed",
                "fullTitle": "Leave Form Component Event Handlers should update reason when it is changed",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var reason = wrapper.find('#reason');\nreason.simulate('change', { target: { value: 'Vacations' } });\n(0, _chai.expect)(wrapper.state().reason.toString()).equal('Vacations');",
                "err": {},
                "isRoot": false,
                "uuid": "fd56a271-2baa-4005-a3ed-83fbabfd9435",
                "parentUUID": "35ce518b-8763-48f9-ba23-80da5d91ed72",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should update leave type when it is changed",
                "fullTitle": "Leave Form Component Event Handlers should update leave type when it is changed",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var leaveType = wrapper.find('FormControl');\nleaveType.simulate('change', { target: { value: 'LOP' } });\n(0, _chai.expect)(wrapper.state().type.toString()).equal('LOP');",
                "err": {},
                "isRoot": false,
                "uuid": "7f5b2e15-c45e-4726-8812-7f868355d4bf",
                "parentUUID": "35ce518b-8763-48f9-ba23-80da5d91ed72",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should submit leave when clicked on Submit",
                "fullTitle": "Leave Form Component Event Handlers should submit leave when clicked on Submit",
                "timedOut": false,
                "duration": 2,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var submitBtn = wrapper.find('#submitBtn');\nsubmitBtn.simulate('click', { preventDefault: function preventDefault() {} });\n(0, _chai.expect)(submitLeaveStub.called).equal(true);",
                "err": {},
                "isRoot": false,
                "uuid": "848d5904-a7a4-4401-90ef-b83dbc9cf667",
                "parentUUID": "35ce518b-8763-48f9-ba23-80da5d91ed72",
                "isHook": false,
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasBeforeHooks": false,
            "hasAfterHooks": false,
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 5,
            "totalPasses": 5,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 9,
            "rootEmpty": false
          }
        ],
        "tests": [],
        "pending": [],
        "root": false,
        "_timeout": 2000,
        "file": "/test/leaves/components/leaveFormSpec.js",
        "uuid": "ab5ef9fb-fd5e-47d8-bab4-4a83c4b6209a",
        "beforeHooks": [
          {
            "title": "\"before each\" hook",
            "fullTitle": "Leave Form Component \"before each\" hook",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "wrapper = (0, _enzyme.shallow)(_react2.default.createElement(_leaveForm2.default, { fetchLeave: fetchLeaveStub, submitLeave: submitLeaveStub, leaves: [] }));",
            "err": {},
            "isRoot": false,
            "uuid": "b66ab2e5-fde6-453a-9425-5d9cd17dcb04",
            "parentUUID": "ab5ef9fb-fd5e-47d8-bab4-4a83c4b6209a",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [],
        "fullFile": "/Users/kunalhire/workspace/leave-management-system/test/leaves/components/leaveFormSpec.js",
        "passes": [],
        "failures": [],
        "skipped": [],
        "hasBeforeHooks": true,
        "hasAfterHooks": false,
        "hasTests": false,
        "hasSuites": true,
        "totalTests": 0,
        "totalPasses": 0,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": false,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 0,
        "rootEmpty": false
      },
      {
        "title": "Leave Form Container",
        "suites": [],
        "tests": [
          {
            "title": "should dispatch an action to fetch a leave",
            "fullTitle": "Leave Form Container should dispatch an action to fetch a leave",
            "timedOut": false,
            "duration": 9,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var shallowWrapper = wrapper.dive({ context: { store: store } });\nshallowWrapper.prop('fetchLeave')();\nvar executedAction = store.getActions()[0];\n(0, _chai.expect)(executedAction.type).equal('LEAVE_FETCHING');\n(0, _chai.expect)(executedAction.leaveId).equal(1234);",
            "err": {},
            "isRoot": false,
            "uuid": "bbe8d206-4ec2-48a3-8a69-6cdfbe43d4ee",
            "parentUUID": "783d8ed3-e612-4b5b-a188-42ad836d4c0a",
            "isHook": false,
            "skipped": false
          }
        ],
        "pending": [],
        "root": false,
        "_timeout": 2000,
        "file": "/test/leaves/container/leaveFormSpec.js",
        "uuid": "783d8ed3-e612-4b5b-a188-42ad836d4c0a",
        "beforeHooks": [
          {
            "title": "\"before each\" hook",
            "fullTitle": "Leave Form Container \"before each\" hook",
            "timedOut": false,
            "duration": 3,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "wrapper = (0, _enzyme.shallow)(_react2.default.createElement(\n    _reactRedux.Provider,\n    { store: store },\n    _react2.default.createElement(_leaveForm2.default, { params: { leaveId: 1234 } })\n));",
            "err": {},
            "isRoot": false,
            "uuid": "bf2976bb-0f83-4be2-b034-03319918f033",
            "parentUUID": "783d8ed3-e612-4b5b-a188-42ad836d4c0a",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [],
        "fullFile": "/Users/kunalhire/workspace/leave-management-system/test/leaves/container/leaveFormSpec.js",
        "passes": [
          {
            "title": "should dispatch an action to fetch a leave",
            "fullTitle": "Leave Form Container should dispatch an action to fetch a leave",
            "timedOut": false,
            "duration": 9,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var shallowWrapper = wrapper.dive({ context: { store: store } });\nshallowWrapper.prop('fetchLeave')();\nvar executedAction = store.getActions()[0];\n(0, _chai.expect)(executedAction.type).equal('LEAVE_FETCHING');\n(0, _chai.expect)(executedAction.leaveId).equal(1234);",
            "err": {},
            "isRoot": false,
            "uuid": "bbe8d206-4ec2-48a3-8a69-6cdfbe43d4ee",
            "parentUUID": "783d8ed3-e612-4b5b-a188-42ad836d4c0a",
            "isHook": false,
            "skipped": false
          }
        ],
        "failures": [],
        "skipped": [],
        "hasBeforeHooks": true,
        "hasAfterHooks": false,
        "hasTests": true,
        "hasSuites": false,
        "totalTests": 1,
        "totalPasses": 1,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": true,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 9,
        "rootEmpty": false
      },
      {
        "title": "Leaves Action",
        "suites": [],
        "tests": [
          {
            "title": "should dispatch correct action when fetchLeave is called",
            "fullTitle": "Leaves Action should dispatch correct action when fetchLeave is called",
            "timedOut": false,
            "duration": 17,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var request = api.get('/leaves/1234').reply(200, leaveFormStub);\nstore.dispatch(_leavesActions.leavesActions.fetchLeave(1234)).then(function (resp) {\n    request.done();\n    var executedActions = store.getActions();\n    (0, _chai.expect)(executedActions[0].type).to.equal(_leavesActions.constants.LEAVE_FETCHING);\n    (0, _chai.expect)(executedActions[1].type).to.equal(_leavesActions.constants.LEAVE_FETCHED);\n    (0, _chai.expect)(executedActions[1].leave).to.deep.equal(leaveFormStub);\n    done();\n}).catch(done);",
            "err": {},
            "isRoot": false,
            "uuid": "e4130478-645a-48c4-9b40-2b58e88cf540",
            "parentUUID": "7d642a5c-2b46-45ed-b371-061eda366df5",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "should dispatch correct action when fetchLeave is called and returned error",
            "fullTitle": "Leaves Action should dispatch correct action when fetchLeave is called and returned error",
            "timedOut": false,
            "duration": 1,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var error = { error: 'error' };\nvar request = api.get('/leaves/1234').reply(500, error);\nstore.dispatch(_leavesActions.leavesActions.fetchLeave(1234)).then(function (resp) {\n    request.done();\n    var executedActions = store.getActions();\n    (0, _chai.expect)(executedActions[0].type).to.equal(_leavesActions.constants.LEAVE_FETCHING);\n    (0, _chai.expect)(executedActions[1].type).to.equal(_leavesActions.constants.LEAVE_ERROR);\n    (0, _chai.expect)(executedActions[1].error).to.deep.equal('Unable to retrieve the leave with id 1234: 500 (Internal Server Error)');\n    done();\n}).catch(done);",
            "err": {},
            "isRoot": false,
            "uuid": "854d1efe-7017-4148-9b4e-2b3134f4aeba",
            "parentUUID": "7d642a5c-2b46-45ed-b371-061eda366df5",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "should dispatch correct action when fetchLeaves is called",
            "fullTitle": "Leaves Action should dispatch correct action when fetchLeaves is called",
            "timedOut": false,
            "duration": 2,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var request = api.get('/leaves').reply(200, [leaveFormStub]);\nstore.dispatch(_leavesActions.leavesActions.fetchLeaves(1234)).then(function (resp) {\n    request.done();\n    var executedActions = store.getActions();\n    (0, _chai.expect)(executedActions[0].type).to.equal(_leavesActions.constants.LEAVE_FETCHING);\n    (0, _chai.expect)(executedActions[1].type).to.equal(_leavesActions.constants.LEAVES_FETCHED);\n    (0, _chai.expect)(executedActions[1].leaves).to.deep.equal([leaveFormStub]);\n    done();\n}).catch(done);",
            "err": {},
            "isRoot": false,
            "uuid": "55bda790-fc5d-4c94-ae05-593b190b59d1",
            "parentUUID": "7d642a5c-2b46-45ed-b371-061eda366df5",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "should dispatch correct action when fetchLeaves is called and returned error",
            "fullTitle": "Leaves Action should dispatch correct action when fetchLeaves is called and returned error",
            "timedOut": false,
            "duration": 1,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var error = { error: 'error' };\nvar request = api.get('/leaves').reply(500, error);\nstore.dispatch(_leavesActions.leavesActions.fetchLeaves(1234)).then(function (resp) {\n    request.done();\n    var executedActions = store.getActions();\n    (0, _chai.expect)(executedActions[0].type).to.equal(_leavesActions.constants.LEAVE_FETCHING);\n    (0, _chai.expect)(executedActions[1].type).to.equal(_leavesActions.constants.LEAVE_ERROR);\n    (0, _chai.expect)(executedActions[1].error).to.deep.equal('Unable to retrieve the leaves: 500 (Internal Server Error)');\n    done();\n}).catch(done);",
            "err": {},
            "isRoot": false,
            "uuid": "446163fc-a769-4eb1-933a-719873a25387",
            "parentUUID": "7d642a5c-2b46-45ed-b371-061eda366df5",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "should dispatch correct action when submitLeave is called",
            "fullTitle": "Leaves Action should dispatch correct action when submitLeave is called",
            "timedOut": false,
            "duration": 2,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var request = api.post('/leaves/').reply(201, leaveFormStub);\nstore.dispatch(_leavesActions.leavesActions.submitLeave(leaveFormStub)).then(function (resp) {\n    request.done();\n    var executedActions = store.getActions();\n    (0, _chai.expect)(executedActions[0].type).to.equal(_leavesActions.constants.LEAVE_FETCHED);\n    (0, _chai.expect)(executedActions[0].resp).to.deep.equal(leaveFormStub);\n    (0, _chai.expect)(executedActions[1].type).to.equal('@@router/CALL_HISTORY_METHOD');\n    (0, _chai.expect)(executedActions[1].payload).to.deep.equal({ method: 'push', args: ['/'] });\n    done();\n}).catch(done);",
            "err": {},
            "isRoot": false,
            "uuid": "9a6a0e15-5ae8-40b6-bae4-8696cb6576b9",
            "parentUUID": "7d642a5c-2b46-45ed-b371-061eda366df5",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "should dispatch correct action when submitLeave is called and returned error",
            "fullTitle": "Leaves Action should dispatch correct action when submitLeave is called and returned error",
            "timedOut": false,
            "duration": 1,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var error = { error: 'error' };\nvar request = api.post('/leaves/').reply(500, error);\nstore.dispatch(_leavesActions.leavesActions.submitLeave(leaveFormStub)).then(function (resp) {\n    request.done();\n    var executedActions = store.getActions();\n    (0, _chai.expect)(executedActions[0].type).to.equal(_leavesActions.constants.LEAVE_ERROR);\n    (0, _chai.expect)(executedActions[0].error).to.deep.equal('Unable to submit the leave: 500 (Internal Server Error)');\n    done();\n}).catch(done);",
            "err": {},
            "isRoot": false,
            "uuid": "77288feb-445c-4715-9aa7-7fae2e9cbc64",
            "parentUUID": "7d642a5c-2b46-45ed-b371-061eda366df5",
            "isHook": false,
            "skipped": false
          }
        ],
        "pending": [],
        "root": false,
        "_timeout": 2000,
        "file": "/test/leaves/leavesActionSpec.js",
        "uuid": "7d642a5c-2b46-45ed-b371-061eda366df5",
        "beforeHooks": [
          {
            "title": "\"before all\" hook",
            "fullTitle": "Leaves Action \"before all\" hook",
            "timedOut": false,
            "duration": 1,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "mockStore = (0, _reduxMockStore2.default)([_reduxThunk2.default]);\napi = (0, _nock2.default)(_http.config.serverUrl);",
            "err": {},
            "isRoot": false,
            "uuid": "a05c20af-63b7-4301-a4bd-382b827ac69c",
            "parentUUID": "7d642a5c-2b46-45ed-b371-061eda366df5",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook",
            "fullTitle": "Leaves Action \"before each\" hook",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "store = mockStore({});",
            "err": {},
            "isRoot": false,
            "uuid": "58532710-b8c7-469d-9b58-cb48a871b78f",
            "parentUUID": "7d642a5c-2b46-45ed-b371-061eda366df5",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [
          {
            "title": "\"after each\" hook",
            "fullTitle": "Leaves Action \"after each\" hook",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "store.clearActions();\n_nock2.default.cleanAll();",
            "err": {},
            "isRoot": false,
            "uuid": "1c404c11-9ae9-4dcf-bc60-7507f1fd33dd",
            "parentUUID": "7d642a5c-2b46-45ed-b371-061eda366df5",
            "isHook": true,
            "skipped": false
          }
        ],
        "fullFile": "/Users/kunalhire/workspace/leave-management-system/test/leaves/leavesActionSpec.js",
        "passes": [
          {
            "title": "should dispatch correct action when fetchLeave is called",
            "fullTitle": "Leaves Action should dispatch correct action when fetchLeave is called",
            "timedOut": false,
            "duration": 17,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var request = api.get('/leaves/1234').reply(200, leaveFormStub);\nstore.dispatch(_leavesActions.leavesActions.fetchLeave(1234)).then(function (resp) {\n    request.done();\n    var executedActions = store.getActions();\n    (0, _chai.expect)(executedActions[0].type).to.equal(_leavesActions.constants.LEAVE_FETCHING);\n    (0, _chai.expect)(executedActions[1].type).to.equal(_leavesActions.constants.LEAVE_FETCHED);\n    (0, _chai.expect)(executedActions[1].leave).to.deep.equal(leaveFormStub);\n    done();\n}).catch(done);",
            "err": {},
            "isRoot": false,
            "uuid": "e4130478-645a-48c4-9b40-2b58e88cf540",
            "parentUUID": "7d642a5c-2b46-45ed-b371-061eda366df5",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "should dispatch correct action when fetchLeave is called and returned error",
            "fullTitle": "Leaves Action should dispatch correct action when fetchLeave is called and returned error",
            "timedOut": false,
            "duration": 1,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var error = { error: 'error' };\nvar request = api.get('/leaves/1234').reply(500, error);\nstore.dispatch(_leavesActions.leavesActions.fetchLeave(1234)).then(function (resp) {\n    request.done();\n    var executedActions = store.getActions();\n    (0, _chai.expect)(executedActions[0].type).to.equal(_leavesActions.constants.LEAVE_FETCHING);\n    (0, _chai.expect)(executedActions[1].type).to.equal(_leavesActions.constants.LEAVE_ERROR);\n    (0, _chai.expect)(executedActions[1].error).to.deep.equal('Unable to retrieve the leave with id 1234: 500 (Internal Server Error)');\n    done();\n}).catch(done);",
            "err": {},
            "isRoot": false,
            "uuid": "854d1efe-7017-4148-9b4e-2b3134f4aeba",
            "parentUUID": "7d642a5c-2b46-45ed-b371-061eda366df5",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "should dispatch correct action when fetchLeaves is called",
            "fullTitle": "Leaves Action should dispatch correct action when fetchLeaves is called",
            "timedOut": false,
            "duration": 2,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var request = api.get('/leaves').reply(200, [leaveFormStub]);\nstore.dispatch(_leavesActions.leavesActions.fetchLeaves(1234)).then(function (resp) {\n    request.done();\n    var executedActions = store.getActions();\n    (0, _chai.expect)(executedActions[0].type).to.equal(_leavesActions.constants.LEAVE_FETCHING);\n    (0, _chai.expect)(executedActions[1].type).to.equal(_leavesActions.constants.LEAVES_FETCHED);\n    (0, _chai.expect)(executedActions[1].leaves).to.deep.equal([leaveFormStub]);\n    done();\n}).catch(done);",
            "err": {},
            "isRoot": false,
            "uuid": "55bda790-fc5d-4c94-ae05-593b190b59d1",
            "parentUUID": "7d642a5c-2b46-45ed-b371-061eda366df5",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "should dispatch correct action when fetchLeaves is called and returned error",
            "fullTitle": "Leaves Action should dispatch correct action when fetchLeaves is called and returned error",
            "timedOut": false,
            "duration": 1,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var error = { error: 'error' };\nvar request = api.get('/leaves').reply(500, error);\nstore.dispatch(_leavesActions.leavesActions.fetchLeaves(1234)).then(function (resp) {\n    request.done();\n    var executedActions = store.getActions();\n    (0, _chai.expect)(executedActions[0].type).to.equal(_leavesActions.constants.LEAVE_FETCHING);\n    (0, _chai.expect)(executedActions[1].type).to.equal(_leavesActions.constants.LEAVE_ERROR);\n    (0, _chai.expect)(executedActions[1].error).to.deep.equal('Unable to retrieve the leaves: 500 (Internal Server Error)');\n    done();\n}).catch(done);",
            "err": {},
            "isRoot": false,
            "uuid": "446163fc-a769-4eb1-933a-719873a25387",
            "parentUUID": "7d642a5c-2b46-45ed-b371-061eda366df5",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "should dispatch correct action when submitLeave is called",
            "fullTitle": "Leaves Action should dispatch correct action when submitLeave is called",
            "timedOut": false,
            "duration": 2,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var request = api.post('/leaves/').reply(201, leaveFormStub);\nstore.dispatch(_leavesActions.leavesActions.submitLeave(leaveFormStub)).then(function (resp) {\n    request.done();\n    var executedActions = store.getActions();\n    (0, _chai.expect)(executedActions[0].type).to.equal(_leavesActions.constants.LEAVE_FETCHED);\n    (0, _chai.expect)(executedActions[0].resp).to.deep.equal(leaveFormStub);\n    (0, _chai.expect)(executedActions[1].type).to.equal('@@router/CALL_HISTORY_METHOD');\n    (0, _chai.expect)(executedActions[1].payload).to.deep.equal({ method: 'push', args: ['/'] });\n    done();\n}).catch(done);",
            "err": {},
            "isRoot": false,
            "uuid": "9a6a0e15-5ae8-40b6-bae4-8696cb6576b9",
            "parentUUID": "7d642a5c-2b46-45ed-b371-061eda366df5",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "should dispatch correct action when submitLeave is called and returned error",
            "fullTitle": "Leaves Action should dispatch correct action when submitLeave is called and returned error",
            "timedOut": false,
            "duration": 1,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var error = { error: 'error' };\nvar request = api.post('/leaves/').reply(500, error);\nstore.dispatch(_leavesActions.leavesActions.submitLeave(leaveFormStub)).then(function (resp) {\n    request.done();\n    var executedActions = store.getActions();\n    (0, _chai.expect)(executedActions[0].type).to.equal(_leavesActions.constants.LEAVE_ERROR);\n    (0, _chai.expect)(executedActions[0].error).to.deep.equal('Unable to submit the leave: 500 (Internal Server Error)');\n    done();\n}).catch(done);",
            "err": {},
            "isRoot": false,
            "uuid": "77288feb-445c-4715-9aa7-7fae2e9cbc64",
            "parentUUID": "7d642a5c-2b46-45ed-b371-061eda366df5",
            "isHook": false,
            "skipped": false
          }
        ],
        "failures": [],
        "skipped": [],
        "hasBeforeHooks": true,
        "hasAfterHooks": true,
        "hasTests": true,
        "hasSuites": false,
        "totalTests": 6,
        "totalPasses": 6,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": true,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 24,
        "rootEmpty": false
      },
      {
        "title": "Leaves Reducer",
        "suites": [],
        "tests": [
          {
            "title": "should return the initial state",
            "fullTitle": "Leaves Reducer should return the initial state",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "(0, _chai.expect)((0, _leavesReducer2.default)(undefined, {})).deep.equal({ leaves: [], leave: {} });",
            "err": {},
            "isRoot": false,
            "uuid": "955f4f43-5d9e-4b59-bc78-c85d9eca356d",
            "parentUUID": "adc77a31-cc0f-41db-ba78-169af7c01ca6",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "should return a new state with status LOADING when a LEAVE_FETCHING action is received",
            "fullTitle": "Leaves Reducer should return a new state with status LOADING when a LEAVE_FETCHING action is received",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var action = { type: _leavesActions.constants.LEAVE_FETCHING };\nvar updatedState = (0, _leavesReducer2.default)(undefined, action);\n(0, _chai.expect)(updatedState.status).to.equal(\"LOADING\");",
            "err": {},
            "isRoot": false,
            "uuid": "e954bbc1-b653-414c-b3d3-8d794cfbe3a7",
            "parentUUID": "adc77a31-cc0f-41db-ba78-169af7c01ca6",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "should return a new state with status LOADING when a LEAVE_FETCHED action is received",
            "fullTitle": "Leaves Reducer should return a new state with status LOADING when a LEAVE_FETCHED action is received",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var leave = { dummy: 'dummy' };\nvar action = { type: _leavesActions.constants.LEAVE_FETCHED, leave: leave };\nvar updatedState = (0, _leavesReducer2.default)(undefined, action);\n(0, _chai.expect)(updatedState.leave).deep.equal(leave);",
            "err": {},
            "isRoot": false,
            "uuid": "5b7b94d9-d090-4b3b-aed3-7f245617f162",
            "parentUUID": "adc77a31-cc0f-41db-ba78-169af7c01ca6",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "should return a new state with status LOADING when a LEAVES_FETCHED action is received",
            "fullTitle": "Leaves Reducer should return a new state with status LOADING when a LEAVES_FETCHED action is received",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var leave = { dummy: 'dummy' };\nvar action = { type: _leavesActions.constants.LEAVES_FETCHED, leaves: [leave] };\nvar updatedState = (0, _leavesReducer2.default)(undefined, action);\n(0, _chai.expect)(updatedState.leaves).deep.equal([leave]);",
            "err": {},
            "isRoot": false,
            "uuid": "f068f1e3-0f3c-482b-b709-2f6b432320d9",
            "parentUUID": "adc77a31-cc0f-41db-ba78-169af7c01ca6",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "should return a new state with status LOADING when a LEAVE_ERROR action is received",
            "fullTitle": "Leaves Reducer should return a new state with status LOADING when a LEAVE_ERROR action is received",
            "timedOut": false,
            "duration": 1,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var error = { error: 'dummy' };\nvar action = { type: _leavesActions.constants.LEAVE_ERROR, error: error };\nvar updatedState = (0, _leavesReducer2.default)(undefined, action);\n(0, _chai.expect)(updatedState.error).deep.equal(error);",
            "err": {},
            "isRoot": false,
            "uuid": "848f4268-0e4f-4c87-ae20-97e18004a0a8",
            "parentUUID": "adc77a31-cc0f-41db-ba78-169af7c01ca6",
            "isHook": false,
            "skipped": false
          }
        ],
        "pending": [],
        "root": false,
        "_timeout": 2000,
        "file": "/test/leaves/leavesReducerSpec.js",
        "uuid": "adc77a31-cc0f-41db-ba78-169af7c01ca6",
        "beforeHooks": [],
        "afterHooks": [],
        "fullFile": "/Users/kunalhire/workspace/leave-management-system/test/leaves/leavesReducerSpec.js",
        "passes": [
          {
            "title": "should return the initial state",
            "fullTitle": "Leaves Reducer should return the initial state",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "(0, _chai.expect)((0, _leavesReducer2.default)(undefined, {})).deep.equal({ leaves: [], leave: {} });",
            "err": {},
            "isRoot": false,
            "uuid": "955f4f43-5d9e-4b59-bc78-c85d9eca356d",
            "parentUUID": "adc77a31-cc0f-41db-ba78-169af7c01ca6",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "should return a new state with status LOADING when a LEAVE_FETCHING action is received",
            "fullTitle": "Leaves Reducer should return a new state with status LOADING when a LEAVE_FETCHING action is received",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var action = { type: _leavesActions.constants.LEAVE_FETCHING };\nvar updatedState = (0, _leavesReducer2.default)(undefined, action);\n(0, _chai.expect)(updatedState.status).to.equal(\"LOADING\");",
            "err": {},
            "isRoot": false,
            "uuid": "e954bbc1-b653-414c-b3d3-8d794cfbe3a7",
            "parentUUID": "adc77a31-cc0f-41db-ba78-169af7c01ca6",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "should return a new state with status LOADING when a LEAVE_FETCHED action is received",
            "fullTitle": "Leaves Reducer should return a new state with status LOADING when a LEAVE_FETCHED action is received",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var leave = { dummy: 'dummy' };\nvar action = { type: _leavesActions.constants.LEAVE_FETCHED, leave: leave };\nvar updatedState = (0, _leavesReducer2.default)(undefined, action);\n(0, _chai.expect)(updatedState.leave).deep.equal(leave);",
            "err": {},
            "isRoot": false,
            "uuid": "5b7b94d9-d090-4b3b-aed3-7f245617f162",
            "parentUUID": "adc77a31-cc0f-41db-ba78-169af7c01ca6",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "should return a new state with status LOADING when a LEAVES_FETCHED action is received",
            "fullTitle": "Leaves Reducer should return a new state with status LOADING when a LEAVES_FETCHED action is received",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var leave = { dummy: 'dummy' };\nvar action = { type: _leavesActions.constants.LEAVES_FETCHED, leaves: [leave] };\nvar updatedState = (0, _leavesReducer2.default)(undefined, action);\n(0, _chai.expect)(updatedState.leaves).deep.equal([leave]);",
            "err": {},
            "isRoot": false,
            "uuid": "f068f1e3-0f3c-482b-b709-2f6b432320d9",
            "parentUUID": "adc77a31-cc0f-41db-ba78-169af7c01ca6",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "should return a new state with status LOADING when a LEAVE_ERROR action is received",
            "fullTitle": "Leaves Reducer should return a new state with status LOADING when a LEAVE_ERROR action is received",
            "timedOut": false,
            "duration": 1,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var error = { error: 'dummy' };\nvar action = { type: _leavesActions.constants.LEAVE_ERROR, error: error };\nvar updatedState = (0, _leavesReducer2.default)(undefined, action);\n(0, _chai.expect)(updatedState.error).deep.equal(error);",
            "err": {},
            "isRoot": false,
            "uuid": "848f4268-0e4f-4c87-ae20-97e18004a0a8",
            "parentUUID": "adc77a31-cc0f-41db-ba78-169af7c01ca6",
            "isHook": false,
            "skipped": false
          }
        ],
        "failures": [],
        "skipped": [],
        "hasBeforeHooks": false,
        "hasAfterHooks": false,
        "hasTests": true,
        "hasSuites": false,
        "totalTests": 5,
        "totalPasses": 5,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": true,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 1,
        "rootEmpty": false
      }
    ],
    "tests": [],
    "pending": [],
    "root": true,
    "_timeout": 2000,
    "uuid": "3dda14d0-9e46-4048-9e18-9a0d2c2af897",
    "beforeHooks": [],
    "afterHooks": [],
    "fullFile": "",
    "file": "",
    "passes": [],
    "failures": [],
    "skipped": [],
    "hasBeforeHooks": false,
    "hasAfterHooks": false,
    "hasTests": false,
    "hasSuites": true,
    "totalTests": 0,
    "totalPasses": 0,
    "totalFailures": 0,
    "totalPending": 0,
    "totalSkipped": 0,
    "hasPasses": false,
    "hasFailures": false,
    "hasPending": false,
    "hasSkipped": false,
    "duration": 0,
    "rootEmpty": true
  },
  "allTests": [
    {
      "title": "should render NewLeave button",
      "fullTitle": "Render should render NewLeave button",
      "timedOut": false,
      "duration": 3,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var newLeaveBtn = wrapper.find('Button');\n(0, _chai.expect)(newLeaveBtn.type()).equal(_reactBootstrap.Button);\n(0, _chai.expect)(newLeaveBtn.prop('children')).equal('New Leave');",
      "err": {},
      "isRoot": false,
      "uuid": "c6c72b38-c223-4739-989c-8b177dfbe45c",
      "parentUUID": "3eb79d84-d200-4f00-8582-8997cde63619",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should navigate to new leave page when clicked on New Leave button",
      "fullTitle": "Event Handlers should navigate to new leave page when clicked on New Leave button",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var newLeaveBtn = wrapper.find('Button');\nnewLeaveBtn.simulate('click', { preventDefault: function preventDefault() {} });\n(0, _chai.expect)(navigateToNewLeaveStub.called).equal(true);",
      "err": {},
      "isRoot": false,
      "uuid": "da2aace8-4522-4ca8-83ee-1988c337074a",
      "parentUUID": "42ff4056-136b-4c18-b944-625b4d0acef8",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should have the correct form name",
      "fullTitle": "Render should have the correct form name",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var title = wrapper.find('h2');\n(0, _chai.expect)(title.text()).equal(\"Leave Management System\");",
      "err": {},
      "isRoot": false,
      "uuid": "51809dc5-255a-4ead-8023-a19fc9d08f77",
      "parentUUID": "c709cfd0-9e0e-4821-b236-17abc18d4df1",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should render fromDate",
      "fullTitle": "Render should render fromDate",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var fromDate = wrapper.find('#fromDate');\n(0, _chai.expect)(fromDate.type()).equal(_fieldGroup2.default);\n(0, _chai.expect)(fromDate.prop('type')).equal('date');\n(0, _chai.expect)(fromDate.prop('label')).equal('From');",
      "err": {},
      "isRoot": false,
      "uuid": "7e5f813b-a00f-4cb7-af9e-a030597b7711",
      "parentUUID": "c709cfd0-9e0e-4821-b236-17abc18d4df1",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should render toDate",
      "fullTitle": "Render should render toDate",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var toDate = wrapper.find('#toDate');\n(0, _chai.expect)(toDate.type()).equal(_fieldGroup2.default);\n(0, _chai.expect)(toDate.prop('type')).equal('date');\n(0, _chai.expect)(toDate.prop('label')).equal('To');",
      "err": {},
      "isRoot": false,
      "uuid": "f73b47fb-a212-4b50-b3e8-4c27f281a2fe",
      "parentUUID": "c709cfd0-9e0e-4821-b236-17abc18d4df1",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should render reason",
      "fullTitle": "Render should render reason",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var reason = wrapper.find('#reason');\n(0, _chai.expect)(reason.type()).equal(_fieldGroup2.default);\n(0, _chai.expect)(reason.prop('type')).equal('text');\n(0, _chai.expect)(reason.prop('label')).equal('Reason');",
      "err": {},
      "isRoot": false,
      "uuid": "6814705f-aef6-4cd1-b4a6-8e0817c4a6e3",
      "parentUUID": "c709cfd0-9e0e-4821-b236-17abc18d4df1",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should render leaveType",
      "fullTitle": "Render should render leaveType",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var leaveType = wrapper.find('FormGroup');\n(0, _chai.expect)(leaveType.find('ControlLabel').prop('children')).equal('Leave Type');\nvar options = leaveType.find('FormControl');\n(0, _chai.expect)(options.childAt(0).prop('children')).equal('Paid Leaves');\n(0, _chai.expect)(options.childAt(1).prop('children')).equal('Leave Without Pay');\n(0, _chai.expect)(options.childAt(2).prop('children')).equal('Compensation Off');",
      "err": {},
      "isRoot": false,
      "uuid": "10cca0f3-d8bb-46cd-9291-3b29dd4ee8bf",
      "parentUUID": "c709cfd0-9e0e-4821-b236-17abc18d4df1",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should render Submit Button",
      "fullTitle": "Render should render Submit Button",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var submitBtn = wrapper.find('#submitBtn');\n(0, _chai.expect)(submitBtn.type()).equal(_reactBootstrap.Button);\n(0, _chai.expect)(submitBtn.prop('children')).equal('Submit');",
      "err": {},
      "isRoot": false,
      "uuid": "380ecdde-bc26-40d5-b859-21c8be095e97",
      "parentUUID": "c709cfd0-9e0e-4821-b236-17abc18d4df1",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should update fromDate when it is changed",
      "fullTitle": "Event Handlers should update fromDate when it is changed",
      "timedOut": false,
      "duration": 4,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var fromDate = wrapper.find('#fromDate');\nfromDate.simulate('change', { target: { value: '2018-04-01' } });\n(0, _chai.expect)(wrapper.state().fromDate.toString()).equal('Sun Apr 01 2018 02:00:00 GMT+0200 (CEST)');",
      "err": {},
      "isRoot": false,
      "uuid": "6e4060a6-d7ad-4ee2-a0e0-15888f3ac0ff",
      "parentUUID": "35ce518b-8763-48f9-ba23-80da5d91ed72",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should update toDate when it is changed",
      "fullTitle": "Event Handlers should update toDate when it is changed",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var toDate = wrapper.find('#toDate');\ntoDate.simulate('change', { target: { value: '2018-04-03' } });\n(0, _chai.expect)(wrapper.state().toDate.toString()).equal('Tue Apr 03 2018 02:00:00 GMT+0200 (CEST)');",
      "err": {},
      "isRoot": false,
      "uuid": "692996f9-2a9d-4b27-9a6c-4f0b8bfed734",
      "parentUUID": "35ce518b-8763-48f9-ba23-80da5d91ed72",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should update reason when it is changed",
      "fullTitle": "Event Handlers should update reason when it is changed",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var reason = wrapper.find('#reason');\nreason.simulate('change', { target: { value: 'Vacations' } });\n(0, _chai.expect)(wrapper.state().reason.toString()).equal('Vacations');",
      "err": {},
      "isRoot": false,
      "uuid": "fd56a271-2baa-4005-a3ed-83fbabfd9435",
      "parentUUID": "35ce518b-8763-48f9-ba23-80da5d91ed72",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should update leave type when it is changed",
      "fullTitle": "Event Handlers should update leave type when it is changed",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var leaveType = wrapper.find('FormControl');\nleaveType.simulate('change', { target: { value: 'LOP' } });\n(0, _chai.expect)(wrapper.state().type.toString()).equal('LOP');",
      "err": {},
      "isRoot": false,
      "uuid": "7f5b2e15-c45e-4726-8812-7f868355d4bf",
      "parentUUID": "35ce518b-8763-48f9-ba23-80da5d91ed72",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should submit leave when clicked on Submit",
      "fullTitle": "Event Handlers should submit leave when clicked on Submit",
      "timedOut": false,
      "duration": 2,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var submitBtn = wrapper.find('#submitBtn');\nsubmitBtn.simulate('click', { preventDefault: function preventDefault() {} });\n(0, _chai.expect)(submitLeaveStub.called).equal(true);",
      "err": {},
      "isRoot": false,
      "uuid": "848d5904-a7a4-4401-90ef-b83dbc9cf667",
      "parentUUID": "35ce518b-8763-48f9-ba23-80da5d91ed72",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should dispatch an action to fetch a leave",
      "fullTitle": "Leave Form Container should dispatch an action to fetch a leave",
      "timedOut": false,
      "duration": 9,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var shallowWrapper = wrapper.dive({ context: { store: store } });\nshallowWrapper.prop('fetchLeave')();\nvar executedAction = store.getActions()[0];\n(0, _chai.expect)(executedAction.type).equal('LEAVE_FETCHING');\n(0, _chai.expect)(executedAction.leaveId).equal(1234);",
      "err": {},
      "isRoot": false,
      "uuid": "bbe8d206-4ec2-48a3-8a69-6cdfbe43d4ee",
      "parentUUID": "783d8ed3-e612-4b5b-a188-42ad836d4c0a",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should dispatch correct action when fetchLeave is called",
      "fullTitle": "Leaves Action should dispatch correct action when fetchLeave is called",
      "timedOut": false,
      "duration": 17,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var request = api.get('/leaves/1234').reply(200, leaveFormStub);\nstore.dispatch(_leavesActions.leavesActions.fetchLeave(1234)).then(function (resp) {\n    request.done();\n    var executedActions = store.getActions();\n    (0, _chai.expect)(executedActions[0].type).to.equal(_leavesActions.constants.LEAVE_FETCHING);\n    (0, _chai.expect)(executedActions[1].type).to.equal(_leavesActions.constants.LEAVE_FETCHED);\n    (0, _chai.expect)(executedActions[1].leave).to.deep.equal(leaveFormStub);\n    done();\n}).catch(done);",
      "err": {},
      "isRoot": false,
      "uuid": "e4130478-645a-48c4-9b40-2b58e88cf540",
      "parentUUID": "7d642a5c-2b46-45ed-b371-061eda366df5",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should dispatch correct action when fetchLeave is called and returned error",
      "fullTitle": "Leaves Action should dispatch correct action when fetchLeave is called and returned error",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var error = { error: 'error' };\nvar request = api.get('/leaves/1234').reply(500, error);\nstore.dispatch(_leavesActions.leavesActions.fetchLeave(1234)).then(function (resp) {\n    request.done();\n    var executedActions = store.getActions();\n    (0, _chai.expect)(executedActions[0].type).to.equal(_leavesActions.constants.LEAVE_FETCHING);\n    (0, _chai.expect)(executedActions[1].type).to.equal(_leavesActions.constants.LEAVE_ERROR);\n    (0, _chai.expect)(executedActions[1].error).to.deep.equal('Unable to retrieve the leave with id 1234: 500 (Internal Server Error)');\n    done();\n}).catch(done);",
      "err": {},
      "isRoot": false,
      "uuid": "854d1efe-7017-4148-9b4e-2b3134f4aeba",
      "parentUUID": "7d642a5c-2b46-45ed-b371-061eda366df5",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should dispatch correct action when fetchLeaves is called",
      "fullTitle": "Leaves Action should dispatch correct action when fetchLeaves is called",
      "timedOut": false,
      "duration": 2,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var request = api.get('/leaves').reply(200, [leaveFormStub]);\nstore.dispatch(_leavesActions.leavesActions.fetchLeaves(1234)).then(function (resp) {\n    request.done();\n    var executedActions = store.getActions();\n    (0, _chai.expect)(executedActions[0].type).to.equal(_leavesActions.constants.LEAVE_FETCHING);\n    (0, _chai.expect)(executedActions[1].type).to.equal(_leavesActions.constants.LEAVES_FETCHED);\n    (0, _chai.expect)(executedActions[1].leaves).to.deep.equal([leaveFormStub]);\n    done();\n}).catch(done);",
      "err": {},
      "isRoot": false,
      "uuid": "55bda790-fc5d-4c94-ae05-593b190b59d1",
      "parentUUID": "7d642a5c-2b46-45ed-b371-061eda366df5",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should dispatch correct action when fetchLeaves is called and returned error",
      "fullTitle": "Leaves Action should dispatch correct action when fetchLeaves is called and returned error",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var error = { error: 'error' };\nvar request = api.get('/leaves').reply(500, error);\nstore.dispatch(_leavesActions.leavesActions.fetchLeaves(1234)).then(function (resp) {\n    request.done();\n    var executedActions = store.getActions();\n    (0, _chai.expect)(executedActions[0].type).to.equal(_leavesActions.constants.LEAVE_FETCHING);\n    (0, _chai.expect)(executedActions[1].type).to.equal(_leavesActions.constants.LEAVE_ERROR);\n    (0, _chai.expect)(executedActions[1].error).to.deep.equal('Unable to retrieve the leaves: 500 (Internal Server Error)');\n    done();\n}).catch(done);",
      "err": {},
      "isRoot": false,
      "uuid": "446163fc-a769-4eb1-933a-719873a25387",
      "parentUUID": "7d642a5c-2b46-45ed-b371-061eda366df5",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should dispatch correct action when submitLeave is called",
      "fullTitle": "Leaves Action should dispatch correct action when submitLeave is called",
      "timedOut": false,
      "duration": 2,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var request = api.post('/leaves/').reply(201, leaveFormStub);\nstore.dispatch(_leavesActions.leavesActions.submitLeave(leaveFormStub)).then(function (resp) {\n    request.done();\n    var executedActions = store.getActions();\n    (0, _chai.expect)(executedActions[0].type).to.equal(_leavesActions.constants.LEAVE_FETCHED);\n    (0, _chai.expect)(executedActions[0].resp).to.deep.equal(leaveFormStub);\n    (0, _chai.expect)(executedActions[1].type).to.equal('@@router/CALL_HISTORY_METHOD');\n    (0, _chai.expect)(executedActions[1].payload).to.deep.equal({ method: 'push', args: ['/'] });\n    done();\n}).catch(done);",
      "err": {},
      "isRoot": false,
      "uuid": "9a6a0e15-5ae8-40b6-bae4-8696cb6576b9",
      "parentUUID": "7d642a5c-2b46-45ed-b371-061eda366df5",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should dispatch correct action when submitLeave is called and returned error",
      "fullTitle": "Leaves Action should dispatch correct action when submitLeave is called and returned error",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var error = { error: 'error' };\nvar request = api.post('/leaves/').reply(500, error);\nstore.dispatch(_leavesActions.leavesActions.submitLeave(leaveFormStub)).then(function (resp) {\n    request.done();\n    var executedActions = store.getActions();\n    (0, _chai.expect)(executedActions[0].type).to.equal(_leavesActions.constants.LEAVE_ERROR);\n    (0, _chai.expect)(executedActions[0].error).to.deep.equal('Unable to submit the leave: 500 (Internal Server Error)');\n    done();\n}).catch(done);",
      "err": {},
      "isRoot": false,
      "uuid": "77288feb-445c-4715-9aa7-7fae2e9cbc64",
      "parentUUID": "7d642a5c-2b46-45ed-b371-061eda366df5",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should return the initial state",
      "fullTitle": "Leaves Reducer should return the initial state",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "(0, _chai.expect)((0, _leavesReducer2.default)(undefined, {})).deep.equal({ leaves: [], leave: {} });",
      "err": {},
      "isRoot": false,
      "uuid": "955f4f43-5d9e-4b59-bc78-c85d9eca356d",
      "parentUUID": "adc77a31-cc0f-41db-ba78-169af7c01ca6",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should return a new state with status LOADING when a LEAVE_FETCHING action is received",
      "fullTitle": "Leaves Reducer should return a new state with status LOADING when a LEAVE_FETCHING action is received",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var action = { type: _leavesActions.constants.LEAVE_FETCHING };\nvar updatedState = (0, _leavesReducer2.default)(undefined, action);\n(0, _chai.expect)(updatedState.status).to.equal(\"LOADING\");",
      "err": {},
      "isRoot": false,
      "uuid": "e954bbc1-b653-414c-b3d3-8d794cfbe3a7",
      "parentUUID": "adc77a31-cc0f-41db-ba78-169af7c01ca6",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should return a new state with status LOADING when a LEAVE_FETCHED action is received",
      "fullTitle": "Leaves Reducer should return a new state with status LOADING when a LEAVE_FETCHED action is received",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var leave = { dummy: 'dummy' };\nvar action = { type: _leavesActions.constants.LEAVE_FETCHED, leave: leave };\nvar updatedState = (0, _leavesReducer2.default)(undefined, action);\n(0, _chai.expect)(updatedState.leave).deep.equal(leave);",
      "err": {},
      "isRoot": false,
      "uuid": "5b7b94d9-d090-4b3b-aed3-7f245617f162",
      "parentUUID": "adc77a31-cc0f-41db-ba78-169af7c01ca6",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should return a new state with status LOADING when a LEAVES_FETCHED action is received",
      "fullTitle": "Leaves Reducer should return a new state with status LOADING when a LEAVES_FETCHED action is received",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var leave = { dummy: 'dummy' };\nvar action = { type: _leavesActions.constants.LEAVES_FETCHED, leaves: [leave] };\nvar updatedState = (0, _leavesReducer2.default)(undefined, action);\n(0, _chai.expect)(updatedState.leaves).deep.equal([leave]);",
      "err": {},
      "isRoot": false,
      "uuid": "f068f1e3-0f3c-482b-b709-2f6b432320d9",
      "parentUUID": "adc77a31-cc0f-41db-ba78-169af7c01ca6",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should return a new state with status LOADING when a LEAVE_ERROR action is received",
      "fullTitle": "Leaves Reducer should return a new state with status LOADING when a LEAVE_ERROR action is received",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var error = { error: 'dummy' };\nvar action = { type: _leavesActions.constants.LEAVE_ERROR, error: error };\nvar updatedState = (0, _leavesReducer2.default)(undefined, action);\n(0, _chai.expect)(updatedState.error).deep.equal(error);",
      "err": {},
      "isRoot": false,
      "uuid": "848f4268-0e4f-4c87-ae20-97e18004a0a8",
      "parentUUID": "adc77a31-cc0f-41db-ba78-169af7c01ca6",
      "isHook": false,
      "skipped": false
    }
  ],
  "allPending": [],
  "allPasses": [
    {
      "title": "should render NewLeave button",
      "fullTitle": "Render should render NewLeave button",
      "timedOut": false,
      "duration": 3,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var newLeaveBtn = wrapper.find('Button');\n(0, _chai.expect)(newLeaveBtn.type()).equal(_reactBootstrap.Button);\n(0, _chai.expect)(newLeaveBtn.prop('children')).equal('New Leave');",
      "err": {},
      "isRoot": false,
      "uuid": "c6c72b38-c223-4739-989c-8b177dfbe45c",
      "parentUUID": "3eb79d84-d200-4f00-8582-8997cde63619",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should navigate to new leave page when clicked on New Leave button",
      "fullTitle": "Event Handlers should navigate to new leave page when clicked on New Leave button",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var newLeaveBtn = wrapper.find('Button');\nnewLeaveBtn.simulate('click', { preventDefault: function preventDefault() {} });\n(0, _chai.expect)(navigateToNewLeaveStub.called).equal(true);",
      "err": {},
      "isRoot": false,
      "uuid": "da2aace8-4522-4ca8-83ee-1988c337074a",
      "parentUUID": "42ff4056-136b-4c18-b944-625b4d0acef8",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should have the correct form name",
      "fullTitle": "Render should have the correct form name",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var title = wrapper.find('h2');\n(0, _chai.expect)(title.text()).equal(\"Leave Management System\");",
      "err": {},
      "isRoot": false,
      "uuid": "51809dc5-255a-4ead-8023-a19fc9d08f77",
      "parentUUID": "c709cfd0-9e0e-4821-b236-17abc18d4df1",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should render fromDate",
      "fullTitle": "Render should render fromDate",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var fromDate = wrapper.find('#fromDate');\n(0, _chai.expect)(fromDate.type()).equal(_fieldGroup2.default);\n(0, _chai.expect)(fromDate.prop('type')).equal('date');\n(0, _chai.expect)(fromDate.prop('label')).equal('From');",
      "err": {},
      "isRoot": false,
      "uuid": "7e5f813b-a00f-4cb7-af9e-a030597b7711",
      "parentUUID": "c709cfd0-9e0e-4821-b236-17abc18d4df1",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should render toDate",
      "fullTitle": "Render should render toDate",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var toDate = wrapper.find('#toDate');\n(0, _chai.expect)(toDate.type()).equal(_fieldGroup2.default);\n(0, _chai.expect)(toDate.prop('type')).equal('date');\n(0, _chai.expect)(toDate.prop('label')).equal('To');",
      "err": {},
      "isRoot": false,
      "uuid": "f73b47fb-a212-4b50-b3e8-4c27f281a2fe",
      "parentUUID": "c709cfd0-9e0e-4821-b236-17abc18d4df1",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should render reason",
      "fullTitle": "Render should render reason",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var reason = wrapper.find('#reason');\n(0, _chai.expect)(reason.type()).equal(_fieldGroup2.default);\n(0, _chai.expect)(reason.prop('type')).equal('text');\n(0, _chai.expect)(reason.prop('label')).equal('Reason');",
      "err": {},
      "isRoot": false,
      "uuid": "6814705f-aef6-4cd1-b4a6-8e0817c4a6e3",
      "parentUUID": "c709cfd0-9e0e-4821-b236-17abc18d4df1",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should render leaveType",
      "fullTitle": "Render should render leaveType",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var leaveType = wrapper.find('FormGroup');\n(0, _chai.expect)(leaveType.find('ControlLabel').prop('children')).equal('Leave Type');\nvar options = leaveType.find('FormControl');\n(0, _chai.expect)(options.childAt(0).prop('children')).equal('Paid Leaves');\n(0, _chai.expect)(options.childAt(1).prop('children')).equal('Leave Without Pay');\n(0, _chai.expect)(options.childAt(2).prop('children')).equal('Compensation Off');",
      "err": {},
      "isRoot": false,
      "uuid": "10cca0f3-d8bb-46cd-9291-3b29dd4ee8bf",
      "parentUUID": "c709cfd0-9e0e-4821-b236-17abc18d4df1",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should render Submit Button",
      "fullTitle": "Render should render Submit Button",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var submitBtn = wrapper.find('#submitBtn');\n(0, _chai.expect)(submitBtn.type()).equal(_reactBootstrap.Button);\n(0, _chai.expect)(submitBtn.prop('children')).equal('Submit');",
      "err": {},
      "isRoot": false,
      "uuid": "380ecdde-bc26-40d5-b859-21c8be095e97",
      "parentUUID": "c709cfd0-9e0e-4821-b236-17abc18d4df1",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should update fromDate when it is changed",
      "fullTitle": "Event Handlers should update fromDate when it is changed",
      "timedOut": false,
      "duration": 4,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var fromDate = wrapper.find('#fromDate');\nfromDate.simulate('change', { target: { value: '2018-04-01' } });\n(0, _chai.expect)(wrapper.state().fromDate.toString()).equal('Sun Apr 01 2018 02:00:00 GMT+0200 (CEST)');",
      "err": {},
      "isRoot": false,
      "uuid": "6e4060a6-d7ad-4ee2-a0e0-15888f3ac0ff",
      "parentUUID": "35ce518b-8763-48f9-ba23-80da5d91ed72",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should update toDate when it is changed",
      "fullTitle": "Event Handlers should update toDate when it is changed",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var toDate = wrapper.find('#toDate');\ntoDate.simulate('change', { target: { value: '2018-04-03' } });\n(0, _chai.expect)(wrapper.state().toDate.toString()).equal('Tue Apr 03 2018 02:00:00 GMT+0200 (CEST)');",
      "err": {},
      "isRoot": false,
      "uuid": "692996f9-2a9d-4b27-9a6c-4f0b8bfed734",
      "parentUUID": "35ce518b-8763-48f9-ba23-80da5d91ed72",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should update reason when it is changed",
      "fullTitle": "Event Handlers should update reason when it is changed",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var reason = wrapper.find('#reason');\nreason.simulate('change', { target: { value: 'Vacations' } });\n(0, _chai.expect)(wrapper.state().reason.toString()).equal('Vacations');",
      "err": {},
      "isRoot": false,
      "uuid": "fd56a271-2baa-4005-a3ed-83fbabfd9435",
      "parentUUID": "35ce518b-8763-48f9-ba23-80da5d91ed72",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should update leave type when it is changed",
      "fullTitle": "Event Handlers should update leave type when it is changed",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var leaveType = wrapper.find('FormControl');\nleaveType.simulate('change', { target: { value: 'LOP' } });\n(0, _chai.expect)(wrapper.state().type.toString()).equal('LOP');",
      "err": {},
      "isRoot": false,
      "uuid": "7f5b2e15-c45e-4726-8812-7f868355d4bf",
      "parentUUID": "35ce518b-8763-48f9-ba23-80da5d91ed72",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should submit leave when clicked on Submit",
      "fullTitle": "Event Handlers should submit leave when clicked on Submit",
      "timedOut": false,
      "duration": 2,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var submitBtn = wrapper.find('#submitBtn');\nsubmitBtn.simulate('click', { preventDefault: function preventDefault() {} });\n(0, _chai.expect)(submitLeaveStub.called).equal(true);",
      "err": {},
      "isRoot": false,
      "uuid": "848d5904-a7a4-4401-90ef-b83dbc9cf667",
      "parentUUID": "35ce518b-8763-48f9-ba23-80da5d91ed72",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should dispatch an action to fetch a leave",
      "fullTitle": "Leave Form Container should dispatch an action to fetch a leave",
      "timedOut": false,
      "duration": 9,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var shallowWrapper = wrapper.dive({ context: { store: store } });\nshallowWrapper.prop('fetchLeave')();\nvar executedAction = store.getActions()[0];\n(0, _chai.expect)(executedAction.type).equal('LEAVE_FETCHING');\n(0, _chai.expect)(executedAction.leaveId).equal(1234);",
      "err": {},
      "isRoot": false,
      "uuid": "bbe8d206-4ec2-48a3-8a69-6cdfbe43d4ee",
      "parentUUID": "783d8ed3-e612-4b5b-a188-42ad836d4c0a",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should dispatch correct action when fetchLeave is called",
      "fullTitle": "Leaves Action should dispatch correct action when fetchLeave is called",
      "timedOut": false,
      "duration": 17,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var request = api.get('/leaves/1234').reply(200, leaveFormStub);\nstore.dispatch(_leavesActions.leavesActions.fetchLeave(1234)).then(function (resp) {\n    request.done();\n    var executedActions = store.getActions();\n    (0, _chai.expect)(executedActions[0].type).to.equal(_leavesActions.constants.LEAVE_FETCHING);\n    (0, _chai.expect)(executedActions[1].type).to.equal(_leavesActions.constants.LEAVE_FETCHED);\n    (0, _chai.expect)(executedActions[1].leave).to.deep.equal(leaveFormStub);\n    done();\n}).catch(done);",
      "err": {},
      "isRoot": false,
      "uuid": "e4130478-645a-48c4-9b40-2b58e88cf540",
      "parentUUID": "7d642a5c-2b46-45ed-b371-061eda366df5",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should dispatch correct action when fetchLeave is called and returned error",
      "fullTitle": "Leaves Action should dispatch correct action when fetchLeave is called and returned error",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var error = { error: 'error' };\nvar request = api.get('/leaves/1234').reply(500, error);\nstore.dispatch(_leavesActions.leavesActions.fetchLeave(1234)).then(function (resp) {\n    request.done();\n    var executedActions = store.getActions();\n    (0, _chai.expect)(executedActions[0].type).to.equal(_leavesActions.constants.LEAVE_FETCHING);\n    (0, _chai.expect)(executedActions[1].type).to.equal(_leavesActions.constants.LEAVE_ERROR);\n    (0, _chai.expect)(executedActions[1].error).to.deep.equal('Unable to retrieve the leave with id 1234: 500 (Internal Server Error)');\n    done();\n}).catch(done);",
      "err": {},
      "isRoot": false,
      "uuid": "854d1efe-7017-4148-9b4e-2b3134f4aeba",
      "parentUUID": "7d642a5c-2b46-45ed-b371-061eda366df5",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should dispatch correct action when fetchLeaves is called",
      "fullTitle": "Leaves Action should dispatch correct action when fetchLeaves is called",
      "timedOut": false,
      "duration": 2,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var request = api.get('/leaves').reply(200, [leaveFormStub]);\nstore.dispatch(_leavesActions.leavesActions.fetchLeaves(1234)).then(function (resp) {\n    request.done();\n    var executedActions = store.getActions();\n    (0, _chai.expect)(executedActions[0].type).to.equal(_leavesActions.constants.LEAVE_FETCHING);\n    (0, _chai.expect)(executedActions[1].type).to.equal(_leavesActions.constants.LEAVES_FETCHED);\n    (0, _chai.expect)(executedActions[1].leaves).to.deep.equal([leaveFormStub]);\n    done();\n}).catch(done);",
      "err": {},
      "isRoot": false,
      "uuid": "55bda790-fc5d-4c94-ae05-593b190b59d1",
      "parentUUID": "7d642a5c-2b46-45ed-b371-061eda366df5",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should dispatch correct action when fetchLeaves is called and returned error",
      "fullTitle": "Leaves Action should dispatch correct action when fetchLeaves is called and returned error",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var error = { error: 'error' };\nvar request = api.get('/leaves').reply(500, error);\nstore.dispatch(_leavesActions.leavesActions.fetchLeaves(1234)).then(function (resp) {\n    request.done();\n    var executedActions = store.getActions();\n    (0, _chai.expect)(executedActions[0].type).to.equal(_leavesActions.constants.LEAVE_FETCHING);\n    (0, _chai.expect)(executedActions[1].type).to.equal(_leavesActions.constants.LEAVE_ERROR);\n    (0, _chai.expect)(executedActions[1].error).to.deep.equal('Unable to retrieve the leaves: 500 (Internal Server Error)');\n    done();\n}).catch(done);",
      "err": {},
      "isRoot": false,
      "uuid": "446163fc-a769-4eb1-933a-719873a25387",
      "parentUUID": "7d642a5c-2b46-45ed-b371-061eda366df5",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should dispatch correct action when submitLeave is called",
      "fullTitle": "Leaves Action should dispatch correct action when submitLeave is called",
      "timedOut": false,
      "duration": 2,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var request = api.post('/leaves/').reply(201, leaveFormStub);\nstore.dispatch(_leavesActions.leavesActions.submitLeave(leaveFormStub)).then(function (resp) {\n    request.done();\n    var executedActions = store.getActions();\n    (0, _chai.expect)(executedActions[0].type).to.equal(_leavesActions.constants.LEAVE_FETCHED);\n    (0, _chai.expect)(executedActions[0].resp).to.deep.equal(leaveFormStub);\n    (0, _chai.expect)(executedActions[1].type).to.equal('@@router/CALL_HISTORY_METHOD');\n    (0, _chai.expect)(executedActions[1].payload).to.deep.equal({ method: 'push', args: ['/'] });\n    done();\n}).catch(done);",
      "err": {},
      "isRoot": false,
      "uuid": "9a6a0e15-5ae8-40b6-bae4-8696cb6576b9",
      "parentUUID": "7d642a5c-2b46-45ed-b371-061eda366df5",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should dispatch correct action when submitLeave is called and returned error",
      "fullTitle": "Leaves Action should dispatch correct action when submitLeave is called and returned error",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var error = { error: 'error' };\nvar request = api.post('/leaves/').reply(500, error);\nstore.dispatch(_leavesActions.leavesActions.submitLeave(leaveFormStub)).then(function (resp) {\n    request.done();\n    var executedActions = store.getActions();\n    (0, _chai.expect)(executedActions[0].type).to.equal(_leavesActions.constants.LEAVE_ERROR);\n    (0, _chai.expect)(executedActions[0].error).to.deep.equal('Unable to submit the leave: 500 (Internal Server Error)');\n    done();\n}).catch(done);",
      "err": {},
      "isRoot": false,
      "uuid": "77288feb-445c-4715-9aa7-7fae2e9cbc64",
      "parentUUID": "7d642a5c-2b46-45ed-b371-061eda366df5",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should return the initial state",
      "fullTitle": "Leaves Reducer should return the initial state",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "(0, _chai.expect)((0, _leavesReducer2.default)(undefined, {})).deep.equal({ leaves: [], leave: {} });",
      "err": {},
      "isRoot": false,
      "uuid": "955f4f43-5d9e-4b59-bc78-c85d9eca356d",
      "parentUUID": "adc77a31-cc0f-41db-ba78-169af7c01ca6",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should return a new state with status LOADING when a LEAVE_FETCHING action is received",
      "fullTitle": "Leaves Reducer should return a new state with status LOADING when a LEAVE_FETCHING action is received",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var action = { type: _leavesActions.constants.LEAVE_FETCHING };\nvar updatedState = (0, _leavesReducer2.default)(undefined, action);\n(0, _chai.expect)(updatedState.status).to.equal(\"LOADING\");",
      "err": {},
      "isRoot": false,
      "uuid": "e954bbc1-b653-414c-b3d3-8d794cfbe3a7",
      "parentUUID": "adc77a31-cc0f-41db-ba78-169af7c01ca6",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should return a new state with status LOADING when a LEAVE_FETCHED action is received",
      "fullTitle": "Leaves Reducer should return a new state with status LOADING when a LEAVE_FETCHED action is received",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var leave = { dummy: 'dummy' };\nvar action = { type: _leavesActions.constants.LEAVE_FETCHED, leave: leave };\nvar updatedState = (0, _leavesReducer2.default)(undefined, action);\n(0, _chai.expect)(updatedState.leave).deep.equal(leave);",
      "err": {},
      "isRoot": false,
      "uuid": "5b7b94d9-d090-4b3b-aed3-7f245617f162",
      "parentUUID": "adc77a31-cc0f-41db-ba78-169af7c01ca6",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should return a new state with status LOADING when a LEAVES_FETCHED action is received",
      "fullTitle": "Leaves Reducer should return a new state with status LOADING when a LEAVES_FETCHED action is received",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var leave = { dummy: 'dummy' };\nvar action = { type: _leavesActions.constants.LEAVES_FETCHED, leaves: [leave] };\nvar updatedState = (0, _leavesReducer2.default)(undefined, action);\n(0, _chai.expect)(updatedState.leaves).deep.equal([leave]);",
      "err": {},
      "isRoot": false,
      "uuid": "f068f1e3-0f3c-482b-b709-2f6b432320d9",
      "parentUUID": "adc77a31-cc0f-41db-ba78-169af7c01ca6",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should return a new state with status LOADING when a LEAVE_ERROR action is received",
      "fullTitle": "Leaves Reducer should return a new state with status LOADING when a LEAVE_ERROR action is received",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var error = { error: 'dummy' };\nvar action = { type: _leavesActions.constants.LEAVE_ERROR, error: error };\nvar updatedState = (0, _leavesReducer2.default)(undefined, action);\n(0, _chai.expect)(updatedState.error).deep.equal(error);",
      "err": {},
      "isRoot": false,
      "uuid": "848f4268-0e4f-4c87-ae20-97e18004a0a8",
      "parentUUID": "adc77a31-cc0f-41db-ba78-169af7c01ca6",
      "isHook": false,
      "skipped": false
    }
  ],
  "allFailures": [],
  "copyrightYear": 2018
}